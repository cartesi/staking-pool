{
  "contractName": "StakingPoolStakingImpl",
  "sourceName": "contracts/StakingPoolStakingImpl.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ctsi",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "amountToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdraw",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "sharesToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "released",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x60c060405234801561001057600080fd5b506040516109f83803806109f883398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009c565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007c57600080fd5b6100858361004d565b91506100936020840161004d565b90509250929050565b60805160601c60a05160601c61090e6100ea600039600081816102e30152818161037d015281816104bd0152818161055c015281816105df01526106600152600061020c015261090e6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637d7c2a1c116100715780637d7c2a1c1461015a5780638da5cb5b14610162578063aa8c217c1461017d578063b811540e14610186578063e366b7bb14610199578063f2fde38b146101a257600080fd5b80630103c92b146100b957806303314efa14610108578063555d8ebb1461011f5780635c975abb146101325780636beaeeae14610148578063715018a614610150575b600080fd5b6100e86100c7366004610808565b609a6020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b61011160975481565b6040519081526020016100ff565b61011161012d366004610838565b6101b5565b60335460ff1660405190151581526020016100ff565b6100e86101e6565b610158610420565b005b61015861048b565b6065546040516001600160a01b0390911681526020016100ff565b61011160985481565b610111610194366004610838565b6106ca565b61011160995481565b6101586101b0366004610808565b6106eb565b6000609754600014156101c6575090565b6097546098546101d6908461088c565b6101e0919061086a565b92915050565b6040516370a0823160e01b81523060048201526000908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561024e57600080fd5b505afa158015610262573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102869190610851565b90506099548111156102a65760995461029f90826108ab565b935061041a565b80609954111561041a576000816099546102c091906108ab565b604051638e9f04b560e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638e9f04b59060240160206040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610851565b90508015610413576040516367ba9b9160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906367ba9b919060240160206040518083038186803b1580156103c757600080fd5b505afa1580156103db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ff9190610851565b90504281101561040d578194505b50610417565b8194505b50505b50909192565b6065546001600160a01b0316331461047f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61048960006107b6565b565b60008060006104986101e6565b9194509250905082156105c357604051631066f98960e21b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063419be6249060240160206040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053f9190610851565b9050806105c15760405163534a7e1d60e11b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a90602401600060405180830381600087803b1580156105a857600080fd5b505af11580156105bc573d6000803e3d6000fd5b505050505b505b8115610644576040516305c2fbcf60e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de7890602401600060405180830381600087803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b505050505b80156106c557604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156106ac57600080fd5b505af11580156106c0573d6000803e3d6000fd5b505050505b505050565b6000609854600014156106db575090565b6098546097546101d6908461088c565b6065546001600160a01b031633146107455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610476565b6001600160a01b0381166107aa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610476565b6107b3816107b6565b50565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561081a57600080fd5b81356001600160a01b038116811461083157600080fd5b9392505050565b60006020828403121561084a57600080fd5b5035919050565b60006020828403121561086357600080fd5b5051919050565b60008261088757634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156108a6576108a66108c2565b500290565b6000828210156108bd576108bd6108c2565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b99c42d229c984d4086a34f85709f56a6f65451433595638e98c3bdaeacb57a764736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80637d7c2a1c116100715780637d7c2a1c1461015a5780638da5cb5b14610162578063aa8c217c1461017d578063b811540e14610186578063e366b7bb14610199578063f2fde38b146101a257600080fd5b80630103c92b146100b957806303314efa14610108578063555d8ebb1461011f5780635c975abb146101325780636beaeeae14610148578063715018a614610150575b600080fd5b6100e86100c7366004610808565b609a6020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060015b60405180910390f35b61011160975481565b6040519081526020016100ff565b61011161012d366004610838565b6101b5565b60335460ff1660405190151581526020016100ff565b6100e86101e6565b610158610420565b005b61015861048b565b6065546040516001600160a01b0390911681526020016100ff565b61011160985481565b610111610194366004610838565b6106ca565b61011160995481565b6101586101b0366004610808565b6106eb565b6000609754600014156101c6575090565b6097546098546101d6908461088c565b6101e0919061086a565b92915050565b6040516370a0823160e01b81523060048201526000908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561024e57600080fd5b505afa158015610262573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102869190610851565b90506099548111156102a65760995461029f90826108ab565b935061041a565b80609954111561041a576000816099546102c091906108ab565b604051638e9f04b560e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638e9f04b59060240160206040518083038186803b15801561032557600080fd5b505afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610851565b90508015610413576040516367ba9b9160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906367ba9b919060240160206040518083038186803b1580156103c757600080fd5b505afa1580156103db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ff9190610851565b90504281101561040d578194505b50610417565b8194505b50505b50909192565b6065546001600160a01b0316331461047f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61048960006107b6565b565b60008060006104986101e6565b9194509250905082156105c357604051631066f98960e21b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063419be6249060240160206040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053f9190610851565b9050806105c15760405163534a7e1d60e11b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a90602401600060405180830381600087803b1580156105a857600080fd5b505af11580156105bc573d6000803e3d6000fd5b505050505b505b8115610644576040516305c2fbcf60e31b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de7890602401600060405180830381600087803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b505050505b80156106c557604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156106ac57600080fd5b505af11580156106c0573d6000803e3d6000fd5b505050505b505050565b6000609854600014156106db575090565b6098546097546101d6908461088c565b6065546001600160a01b031633146107455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610476565b6001600160a01b0381166107aa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610476565b6107b3816107b6565b50565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561081a57600080fd5b81356001600160a01b038116811461083157600080fd5b9392505050565b60006020828403121561084a57600080fd5b5035919050565b60006020828403121561086357600080fd5b5051919050565b60008261088757634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156108a6576108a66108c2565b500290565b6000828210156108bd576108bd6108c2565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b99c42d229c984d4086a34f85709f56a6f65451433595638e98c3bdaeacb57a764736f6c63430008060033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "amounts()": {
        "returns": {
          "stake": "amount of tokens that can be staked",
          "unstake": "amount of tokens that must be unstaked to add liquidity",
          "withdraw": "amount of tokens that can be withdrawn to add liquidity"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_3107": {
          "entryPoint": null,
          "id": 3107,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "abi_decode_address_fromMemory": {
          "entryPoint": 77,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_address_fromMemory": {
          "entryPoint": 105,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:491:40",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:40",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "74:117:40",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "84:22:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "99:6:40"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "93:5:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "93:13:40"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "84:5:40"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "169:16:40",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "178:1:40",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "181:1:40",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "171:6:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "171:12:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "171:12:40"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "128:5:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "139:5:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "154:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "159:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "150:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "150:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "163:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "146:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "146:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "135:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "135:31:40"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "125:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "125:42:40"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "118:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "118:50:40"
                      },
                      "nodeType": "YulIf",
                      "src": "115:2:40"
                    }
                  ]
                },
                "name": "abi_decode_address_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "53:6:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "64:5:40",
                    "type": ""
                  }
                ],
                "src": "14:177:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "294:195:40",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "340:16:40",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "349:1:40",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "352:1:40",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "342:6:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "342:12:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "342:12:40"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "315:7:40"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "324:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "311:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "311:23:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "336:2:40",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "307:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "307:32:40"
                      },
                      "nodeType": "YulIf",
                      "src": "304:2:40"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "365:50:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "405:9:40"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address_fromMemory",
                          "nodeType": "YulIdentifier",
                          "src": "375:29:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "375:40:40"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "365:6:40"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "424:59:40",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "468:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "479:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "464:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "464:18:40"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address_fromMemory",
                          "nodeType": "YulIdentifier",
                          "src": "434:29:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "434:49:40"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "424:6:40"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_address_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "252:9:40",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "263:7:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "275:6:40",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "283:6:40",
                    "type": ""
                  }
                ],
                "src": "196:293:40"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n}",
          "id": 40,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x9F8 CODESIZE SUB DUP1 PUSH2 0x9F8 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x69 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x80 MSTORE SWAP2 SHL AND PUSH1 0xA0 MSTORE PUSH2 0x9C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x85 DUP4 PUSH2 0x4D JUMP JUMPDEST SWAP2 POP PUSH2 0x93 PUSH1 0x20 DUP5 ADD PUSH2 0x4D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x90E PUSH2 0xEA PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2E3 ADD MSTORE DUP2 DUP2 PUSH2 0x37D ADD MSTORE DUP2 DUP2 PUSH2 0x4BD ADD MSTORE DUP2 DUP2 PUSH2 0x55C ADD MSTORE DUP2 DUP2 PUSH2 0x5DF ADD MSTORE PUSH2 0x660 ADD MSTORE PUSH1 0x0 PUSH2 0x20C ADD MSTORE PUSH2 0x90E PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7D7C2A1C GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x7D7C2A1C EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0xAA8C217C EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0xB811540E EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0xE366B7BB EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x103C92B EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x3314EFA EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x555D8EBB EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x132 JUMPI DUP1 PUSH4 0x6BEAEEAE EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x150 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE8 PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x808 JUMP JUMPDEST PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x111 PUSH1 0x97 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST PUSH2 0x111 PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0x838 JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0xFF AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST PUSH2 0xE8 PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x420 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x158 PUSH2 0x48B JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST PUSH2 0x111 PUSH1 0x98 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x111 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0x838 JUMP JUMPDEST PUSH2 0x6CA JUMP JUMPDEST PUSH2 0x111 PUSH1 0x99 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x808 JUMP JUMPDEST PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1C6 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x98 SLOAD PUSH2 0x1D6 SWAP1 DUP5 PUSH2 0x88C JUMP JUMPDEST PUSH2 0x1E0 SWAP2 SWAP1 PUSH2 0x86A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x262 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x851 JUMP JUMPDEST SWAP1 POP PUSH1 0x99 SLOAD DUP2 GT ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x99 SLOAD PUSH2 0x29F SWAP1 DUP3 PUSH2 0x8AB JUMP JUMPDEST SWAP4 POP PUSH2 0x41A JUMP JUMPDEST DUP1 PUSH1 0x99 SLOAD GT ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP2 PUSH1 0x99 SLOAD PUSH2 0x2C0 SWAP2 SWAP1 PUSH2 0x8AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8E9F04B5 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x8E9F04B5 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x339 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35D SWAP2 SWAP1 PUSH2 0x851 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x413 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67BA9B91 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x67BA9B91 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3FF SWAP2 SWAP1 PUSH2 0x851 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP2 LT ISZERO PUSH2 0x40D JUMPI DUP2 SWAP5 POP JUMPDEST POP PUSH2 0x417 JUMP JUMPDEST DUP2 SWAP5 POP JUMPDEST POP POP JUMPDEST POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x47F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x489 PUSH1 0x0 PUSH2 0x7B6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x498 PUSH2 0x1E6 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP DUP3 ISZERO PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1066F989 PUSH1 0xE2 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x419BE624 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x51B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x53F SWAP2 SWAP1 PUSH2 0x851 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x534A7E1D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA694FC3A SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP JUMPDEST DUP2 ISZERO PUSH2 0x644 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5C2FBCF PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E17DE78 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x63F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 ISZERO PUSH2 0x6C5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x98 SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6DB JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x98 SLOAD PUSH1 0x97 SLOAD PUSH2 0x1D6 SWAP1 DUP5 PUSH2 0x88C JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x745 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x476 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x476 JUMP JUMPDEST PUSH2 0x7B3 DUP2 PUSH2 0x7B6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x81A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x831 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x84A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x863 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x887 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x8A6 JUMPI PUSH2 0x8A6 PUSH2 0x8C2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x8BD JUMPI PUSH2 0x8BD PUSH2 0x8C2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 SWAP13 TIMESTAMP 0xD2 0x29 0xC9 DUP5 0xD4 ADDMOD PUSH11 0x34F85709F56A6F65451433 MSIZE JUMP CODESIZE 0xE9 DUP13 EXTCODESIZE 0xDA 0xEA 0xCB JUMPI 0xA7 PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ",
      "sourceMap": "1127:2867:26:-:0;;;1280:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;1335:20:26;;;;;;;;1365:28;;;;;1127:2867;;14:177:40;93:13;;-1:-1:-1;;;;;135:31:40;;125:42;;115:2;;181:1;178;171:12;115:2;74:117;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:2;;;352:1;349;342:12;304:2;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;294:195;;;;;:::o;:::-;1127:2867:26;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@_msgSender_952": {
          "entryPoint": null,
          "id": 952,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_setOwner_759": {
          "entryPoint": 1974,
          "id": 759,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@amountToShares_2425": {
          "entryPoint": 1738,
          "id": 2425,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@amount_2389": {
          "entryPoint": null,
          "id": 2389,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@amounts_3273": {
          "entryPoint": 486,
          "id": 3273,
          "parameterSlots": 0,
          "returnSlots": 3
        },
        "@owner_689": {
          "entryPoint": null,
          "id": 689,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@paused_863": {
          "entryPoint": null,
          "id": 863,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@rebalance_3189": {
          "entryPoint": 1163,
          "id": 3189,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@renounceOwnership_717": {
          "entryPoint": 1056,
          "id": 717,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@requiredLiquidity_2391": {
          "entryPoint": null,
          "id": 2391,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@sharesToAmount_2447": {
          "entryPoint": 437,
          "id": 2447,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@shares_2387": {
          "entryPoint": null,
          "id": 2387,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@transferOwnership_740": {
          "entryPoint": 1771,
          "id": 740,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@userBalance_2403": {
          "entryPoint": null,
          "id": 2403,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 2056,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256": {
          "entryPoint": 2104,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256_fromMemory": {
          "entryPoint": 2129,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "checked_div_t_uint256": {
          "entryPoint": 2154,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_mul_t_uint256": {
          "entryPoint": 2188,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 2219,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 2242,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:3007:40",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:40",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "84:216:40",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "130:16:40",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "139:1:40",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "142:1:40",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "132:6:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "132:12:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "132:12:40"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "105:7:40"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "114:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "101:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "101:23:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "126:2:40",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "97:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "97:32:40"
                      },
                      "nodeType": "YulIf",
                      "src": "94:2:40"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "155:36:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "181:9:40"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "168:12:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "168:23:40"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "159:5:40",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "254:16:40",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "263:1:40",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "266:1:40",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "256:6:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "256:12:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "256:12:40"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "213:5:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "224:5:40"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "239:3:40",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "244:1:40",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "235:3:40"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "235:11:40"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "248:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "231:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "231:19:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "220:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "220:31:40"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "210:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "210:42:40"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "203:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "203:50:40"
                      },
                      "nodeType": "YulIf",
                      "src": "200:2:40"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "279:15:40",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "289:5:40"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "279:6:40"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "50:9:40",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "61:7:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "73:6:40",
                    "type": ""
                  }
                ],
                "src": "14:286:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "375:110:40",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "421:16:40",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "430:1:40",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "433:1:40",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "423:6:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "423:12:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "423:12:40"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "396:7:40"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "405:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "392:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "392:23:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "417:2:40",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "388:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "388:32:40"
                      },
                      "nodeType": "YulIf",
                      "src": "385:2:40"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "446:33:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "469:9:40"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "456:12:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "456:23:40"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "446:6:40"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "341:9:40",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "352:7:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "364:6:40",
                    "type": ""
                  }
                ],
                "src": "305:180:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "571:103:40",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "617:16:40",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "626:1:40",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "629:1:40",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "619:6:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "619:12:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "619:12:40"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "592:7:40"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "601:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "588:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "588:23:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "613:2:40",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "584:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "584:32:40"
                      },
                      "nodeType": "YulIf",
                      "src": "581:2:40"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "642:26:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "658:9:40"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "652:5:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "652:16:40"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "642:6:40"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "537:9:40",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "548:7:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "560:6:40",
                    "type": ""
                  }
                ],
                "src": "490:184:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "780:102:40",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "790:26:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "802:9:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "813:2:40",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "798:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "798:18:40"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "790:4:40"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "832:9:40"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "847:6:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "863:3:40",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "868:1:40",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "859:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "859:11:40"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "872:1:40",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "855:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "855:19:40"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "843:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "843:32:40"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "825:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "825:51:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "825:51:40"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "749:9:40",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "760:6:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "771:4:40",
                    "type": ""
                  }
                ],
                "src": "679:203:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "982:92:40",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "992:26:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1004:9:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1015:2:40",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1000:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1000:18:40"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "992:4:40"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1034:9:40"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1059:6:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1052:6:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1052:14:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1045:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1045:22:40"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1027:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1027:41:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1027:41:40"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "951:9:40",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "962:6:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "973:4:40",
                    "type": ""
                  }
                ],
                "src": "887:187:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1253:228:40",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1270:9:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1281:2:40",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1263:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1263:21:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1263:21:40"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1304:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1315:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1300:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1300:18:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1320:2:40",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1293:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1293:30:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1293:30:40"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1343:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1354:2:40",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1339:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1339:18:40"
                          },
                          {
                            "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "1359:34:40",
                            "type": "",
                            "value": "Ownable: new owner is the zero a"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1332:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1332:62:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1332:62:40"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1414:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1425:2:40",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1410:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1410:18:40"
                          },
                          {
                            "hexValue": "646472657373",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "1430:8:40",
                            "type": "",
                            "value": "ddress"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1403:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1403:36:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1403:36:40"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1448:27:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1460:9:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1471:3:40",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1456:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1456:19:40"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1448:4:40"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1230:9:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1244:4:40",
                    "type": ""
                  }
                ],
                "src": "1079:402:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1660:182:40",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1677:9:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1688:2:40",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1670:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1670:21:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1670:21:40"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1711:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1722:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1707:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1707:18:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1727:2:40",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1700:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1700:30:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1700:30:40"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1750:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1761:2:40",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1746:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1746:18:40"
                          },
                          {
                            "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "1766:34:40",
                            "type": "",
                            "value": "Ownable: caller is not the owner"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1739:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1739:62:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1739:62:40"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1810:26:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1822:9:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1833:2:40",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1818:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1818:18:40"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1810:4:40"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1637:9:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1651:4:40",
                    "type": ""
                  }
                ],
                "src": "1486:356:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1948:76:40",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1958:26:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1970:9:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1981:2:40",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1966:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1966:18:40"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1958:4:40"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2000:9:40"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "2011:6:40"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1993:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1993:25:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1993:25:40"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1917:9:40",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1928:6:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1939:4:40",
                    "type": ""
                  }
                ],
                "src": "1847:177:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2186:162:40",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "2196:26:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2208:9:40"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2219:2:40",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2204:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2204:18:40"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "2196:4:40"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2238:9:40"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "2249:6:40"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2231:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2231:25:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2231:25:40"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2276:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2287:2:40",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2272:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2272:18:40"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "2292:6:40"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2265:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2265:34:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2265:34:40"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2319:9:40"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2330:2:40",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2315:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2315:18:40"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "2335:6:40"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2308:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2308:34:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2308:34:40"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "2139:9:40",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "2150:6:40",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "2158:6:40",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "2166:6:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "2177:4:40",
                    "type": ""
                  }
                ],
                "src": "2029:319:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2399:171:40",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2430:111:40",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2451:1:40",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2458:3:40",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2463:10:40",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "2454:3:40"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2454:20:40"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "2444:6:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2444:31:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2444:31:40"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2495:1:40",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2498:4:40",
                                  "type": "",
                                  "value": "0x12"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "2488:6:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2488:15:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2488:15:40"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2523:1:40",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2526:4:40",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2516:6:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2516:15:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2516:15:40"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2419:1:40"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "2412:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2412:9:40"
                      },
                      "nodeType": "YulIf",
                      "src": "2409:2:40"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2550:14:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2559:1:40"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2562:1:40"
                          }
                        ],
                        "functionName": {
                          "name": "div",
                          "nodeType": "YulIdentifier",
                          "src": "2555:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2555:9:40"
                      },
                      "variableNames": [
                        {
                          "name": "r",
                          "nodeType": "YulIdentifier",
                          "src": "2550:1:40"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_div_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "2384:1:40",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "2387:1:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "r",
                    "nodeType": "YulTypedName",
                    "src": "2393:1:40",
                    "type": ""
                  }
                ],
                "src": "2353:217:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2627:116:40",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2686:22:40",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "2688:16:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2688:18:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2688:18:40"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2658:1:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "2651:6:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2651:9:40"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2644:6:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2644:17:40"
                          },
                          {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "2666:1:40"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2677:1:40",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2673:3:40"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2673:6:40"
                                  },
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "2681:1:40"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "2669:3:40"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2669:14:40"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2663:2:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2663:21:40"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "2640:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2640:45:40"
                      },
                      "nodeType": "YulIf",
                      "src": "2637:2:40"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2717:20:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2732:1:40"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2735:1:40"
                          }
                        ],
                        "functionName": {
                          "name": "mul",
                          "nodeType": "YulIdentifier",
                          "src": "2728:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2728:9:40"
                      },
                      "variableNames": [
                        {
                          "name": "product",
                          "nodeType": "YulIdentifier",
                          "src": "2717:7:40"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_mul_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "2606:1:40",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "2609:1:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "product",
                    "nodeType": "YulTypedName",
                    "src": "2615:7:40",
                    "type": ""
                  }
                ],
                "src": "2575:168:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2797:76:40",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2819:22:40",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "2821:16:40"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2821:18:40"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2821:18:40"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2813:1:40"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2816:1:40"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "2810:2:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2810:8:40"
                      },
                      "nodeType": "YulIf",
                      "src": "2807:2:40"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2850:17:40",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "2862:1:40"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "2865:1:40"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "2858:3:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2858:9:40"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "2850:4:40"
                        }
                      ]
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "2779:1:40",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "2782:1:40",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "2788:4:40",
                    "type": ""
                  }
                ],
                "src": "2748:125:40"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2910:95:40",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2927:1:40",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2934:3:40",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2939:10:40",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "2930:3:40"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2930:20:40"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2920:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2920:31:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2920:31:40"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2967:1:40",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2970:4:40",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2960:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2960:15:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2960:15:40"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2991:1:40",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2994:4:40",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "2984:6:40"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2984:15:40"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2984:15:40"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "2878:127:40"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
          "id": 40,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {
        "3084": [
          {
            "length": 32,
            "start": 524
          }
        ],
        "3087": [
          {
            "length": 32,
            "start": 739
          },
          {
            "length": 32,
            "start": 893
          },
          {
            "length": 32,
            "start": 1213
          },
          {
            "length": 32,
            "start": 1372
          },
          {
            "length": 32,
            "start": 1503
          },
          {
            "length": 32,
            "start": 1632
          }
        ]
      },
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7D7C2A1C GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x7D7C2A1C EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0xAA8C217C EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0xB811540E EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0xE366B7BB EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x103C92B EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x3314EFA EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x555D8EBB EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x132 JUMPI DUP1 PUSH4 0x6BEAEEAE EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x150 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE8 PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0x808 JUMP JUMPDEST PUSH1 0x9A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x111 PUSH1 0x97 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST PUSH2 0x111 PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0x838 JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0xFF AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST PUSH2 0xE8 PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x420 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x158 PUSH2 0x48B JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFF JUMP JUMPDEST PUSH2 0x111 PUSH1 0x98 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x111 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0x838 JUMP JUMPDEST PUSH2 0x6CA JUMP JUMPDEST PUSH2 0x111 PUSH1 0x99 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x158 PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x808 JUMP JUMPDEST PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1C6 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0x98 SLOAD PUSH2 0x1D6 SWAP1 DUP5 PUSH2 0x88C JUMP JUMPDEST PUSH2 0x1E0 SWAP2 SWAP1 PUSH2 0x86A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x262 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x851 JUMP JUMPDEST SWAP1 POP PUSH1 0x99 SLOAD DUP2 GT ISZERO PUSH2 0x2A6 JUMPI PUSH1 0x99 SLOAD PUSH2 0x29F SWAP1 DUP3 PUSH2 0x8AB JUMP JUMPDEST SWAP4 POP PUSH2 0x41A JUMP JUMPDEST DUP1 PUSH1 0x99 SLOAD GT ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP2 PUSH1 0x99 SLOAD PUSH2 0x2C0 SWAP2 SWAP1 PUSH2 0x8AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8E9F04B5 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x8E9F04B5 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x339 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35D SWAP2 SWAP1 PUSH2 0x851 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x413 JUMPI PUSH1 0x40 MLOAD PUSH4 0x67BA9B91 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x67BA9B91 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3FF SWAP2 SWAP1 PUSH2 0x851 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP2 LT ISZERO PUSH2 0x40D JUMPI DUP2 SWAP5 POP JUMPDEST POP PUSH2 0x417 JUMP JUMPDEST DUP2 SWAP5 POP JUMPDEST POP POP JUMPDEST POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x47F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x489 PUSH1 0x0 PUSH2 0x7B6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x498 PUSH2 0x1E6 JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP DUP3 ISZERO PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1066F989 PUSH1 0xE2 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x419BE624 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x51B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x53F SWAP2 SWAP1 PUSH2 0x851 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x534A7E1D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA694FC3A SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP JUMPDEST DUP2 ISZERO PUSH2 0x644 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5C2FBCF PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E17DE78 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x63F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 ISZERO PUSH2 0x6C5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x98 SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6DB JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x98 SLOAD PUSH1 0x97 SLOAD PUSH2 0x1D6 SWAP1 DUP5 PUSH2 0x88C JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x745 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x476 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7AA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x476 JUMP JUMPDEST PUSH2 0x7B3 DUP2 PUSH2 0x7B6 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x81A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x831 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x84A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x863 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x887 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x8A6 JUMPI PUSH2 0x8A6 PUSH2 0x8C2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x8BD JUMPI PUSH2 0x8BD PUSH2 0x8C2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 SWAP13 TIMESTAMP 0xD2 0x29 0xC9 DUP5 0xD4 ADDMOD PUSH11 0x34F85709F56A6F65451433 MSIZE JUMP CODESIZE 0xE9 DUP13 EXTCODESIZE 0xDA 0xEA 0xCB JUMPI 0xA7 PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ",
      "sourceMap": "1127:2867:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1433:50:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2231:25:40;;;2287:2;2272:18;;2265:34;;;;2315:18;;;2308:34;2219:2;2204:18;1433:50:21;;;;;;;;975:21;;;;;;;;;1993:25:40;;;1981:2;1966:18;975:21:21;1948:76:40;1766:270:21;;;;;;:::i;:::-;;:::i;1310:84:9:-;1380:7;;;;1310:84;;1052:14:40;;1045:22;1027:41;;1015:2;1000:18;1310:84:9;982:92:40;2423:1569:26;;;:::i;1871:92:7:-;;;:::i;:::-;;1614:803:26;;;:::i;1239:85:7:-;1311:6;;1239:85;;-1:-1:-1;;;;;1311:6:7;;;825:51:40;;813:2;798:18;1239:85:7;780:102:40;1028:21:21;;;;;;1490:270;;;;;;:::i;:::-;;:::i;1106:32::-;;;;;;2112:189:7;;;;;;:::i;:::-;;:::i;1766:270:21:-;1828:7;1884:6;;1894:1;1884:11;1880:106;;;-1:-1:-1;1968:7:21;1766:270::o;1880:106::-;2023:6;;2013;;2003:16;;:7;:16;:::i;:::-;2002:27;;;;:::i;:::-;1995:34;1766:270;-1:-1:-1;;1766:270:21:o;2423:1569:26:-;2675:29;;-1:-1:-1;;;2675:29:26;;2698:4;2675:29;;;825:51:40;2517:13:26;;;;;;;;-1:-1:-1;;;;;2675:4:26;:14;;;;798:18:40;;2675:29:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2657:47;;2729:17;;2719:7;:27;2715:1271;;;2829:17;;2819:27;;:7;:27;:::i;:::-;2811:35;;2715:1271;;;2887:7;2867:17;;:27;2863:1123;;;2974:24;3021:7;3001:17;;:27;;;;:::i;:::-;3114:42;;-1:-1:-1;;;3114:42:26;;3150:4;3114:42;;;825:51:40;2974:54:26;;-1:-1:-1;3094:17:26;;-1:-1:-1;;;;;3114:7:26;:27;;;;798:18:40;;3114:42:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3094:62;-1:-1:-1;3174:13:26;;3170:703;;3344:82;;-1:-1:-1;;;3344:82:26;;3403:4;3344:82;;;825:51:40;3324:17:26;;3344:7;-1:-1:-1;;;;;3344:29:26;;;;798:18:40;;3344:82:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3324:102;;3460:15;3448:9;:27;3444:144;;;3560:9;3549:20;;3444:144;3189:562;3170:703;;;3842:16;3832:26;;3170:703;2896:987;;2863:1123;2604:1388;2423:1569;;;:::o;1871:92:7:-;1311:6;;-1:-1:-1;;;;;1311:6:7;901:10:10;1451:23:7;1443:68;;;;-1:-1:-1;;;1443:68:7;;1688:2:40;1443:68:7;;;1670:21:40;;;1707:18;;;1700:30;1766:34;1746:18;;;1739:62;1818:18;;1443:68:7;;;;;;;;;1935:21:::1;1953:1;1935:9;:21::i;:::-;1871:92::o:0;1614:803:26:-;1685:14;1701:16;1719:17;1740:9;:7;:9::i;:::-;1684:65;;-1:-1:-1;1684:65:26;-1:-1:-1;1684:65:26;-1:-1:-1;1819:10:26;;1815:287;;1864:41;;-1:-1:-1;;;1864:41:26;;1899:4;1864:41;;;825:51:40;1845:16:26;;1864:7;-1:-1:-1;;;;;1864:26:26;;;;798:18:40;;1864:41:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1845:60;-1:-1:-1;1923:13:26;1919:173;;2056:21;;-1:-1:-1;;;2056:21:26;;;;;1993:25:40;;;2056:7:26;-1:-1:-1;;;;;2056:13:26;;;;1966:18:40;;2056:21:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1919:173;1831:271;1815:287;2116:12;;2112:143;;2219:25;;-1:-1:-1;;;2219:25:26;;;;;1993::40;;;2219:7:26;-1:-1:-1;;;;;2219:15:26;;;;1966:18:40;;2219:25:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2112:143;2269:13;;2265:146;;2373:27;;-1:-1:-1;;;2373:27:26;;;;;1993:25:40;;;2373:7:26;-1:-1:-1;;;;;2373:16:26;;;;1966:18:40;;2373:27:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2265:146;1651:766;;;1614:803::o;1490:270:21:-;1552:7;1608:6;;1618:1;1608:11;1604:106;;;-1:-1:-1;1692:7:21;1490:270::o;1604:106::-;1747:6;;1737;;1727:16;;:7;:16;:::i;2112:189:7:-;1311:6;;-1:-1:-1;;;;;1311:6:7;901:10:10;1451:23:7;1443:68;;;;-1:-1:-1;;;1443:68:7;;1688:2:40;1443:68:7;;;1670:21:40;;;1707:18;;;1700:30;1766:34;1746:18;;;1739:62;1818:18;;1443:68:7;1660:182:40;1443:68:7;-1:-1:-1;;;;;2200:22:7;::::1;2192:73;;;::::0;-1:-1:-1;;;2192:73:7;;1281:2:40;2192:73:7::1;::::0;::::1;1263:21:40::0;1320:2;1300:18;;;1293:30;1359:34;1339:18;;;1332:62;-1:-1:-1;;;1410:18:40;;;1403:36;1456:19;;2192:73:7::1;1253:228:40::0;2192:73:7::1;2275:19;2285:8;2275:9;:19::i;:::-;2112:189:::0;:::o;2307:169::-;2381:6;;;-1:-1:-1;;;;;2397:17:7;;;-1:-1:-1;;;;;;2397:17:7;;;;;;;2429:40;;2381:6;;;2397:17;2381:6;;2429:40;;2362:16;;2429:40;2352:124;2307:169;:::o;14:286:40:-;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;142:1;139;132:12;94:2;168:23;;-1:-1:-1;;;;;220:31:40;;210:42;;200:2;;266:1;263;256:12;200:2;289:5;84:216;-1:-1:-1;;;84:216:40:o;305:180::-;364:6;417:2;405:9;396:7;392:23;388:32;385:2;;;433:1;430;423:12;385:2;-1:-1:-1;456:23:40;;375:110;-1:-1:-1;375:110:40:o;490:184::-;560:6;613:2;601:9;592:7;588:23;584:32;581:2;;;629:1;626;619:12;581:2;-1:-1:-1;652:16:40;;571:103;-1:-1:-1;571:103:40:o;2353:217::-;2393:1;2419;2409:2;;2463:10;2458:3;2454:20;2451:1;2444:31;2498:4;2495:1;2488:15;2526:4;2523:1;2516:15;2409:2;-1:-1:-1;2555:9:40;;2399:171::o;2575:168::-;2615:7;2681:1;2677;2673:6;2669:14;2666:1;2663:21;2658:1;2651:9;2644:17;2640:45;2637:2;;;2688:18;;:::i;:::-;-1:-1:-1;2728:9:40;;2627:116::o;2748:125::-;2788:4;2816:1;2813;2810:8;2807:2;;;2821:18;;:::i;:::-;-1:-1:-1;2858:9:40;;2797:76::o;2878:127::-;2939:10;2934:3;2930:20;2927:1;2920:31;2970:4;2967:1;2960:15;2994:4;2991:1;2984:15"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "463600",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "amount()": "2339",
        "amountToShares(uint256)": "6841",
        "amounts()": "infinite",
        "owner()": "2323",
        "paused()": "2359",
        "rebalance()": "infinite",
        "renounceOwnership()": "28228",
        "requiredLiquidity()": "2383",
        "shares()": "2318",
        "sharesToAmount(uint256)": "6820",
        "transferOwnership(address)": "28387",
        "userBalance(address)": "6749"
      },
      "internal": {
        "__StakingPoolStaking_init()": "infinite"
      }
    },
    "methodIdentifiers": {
      "amount()": "aa8c217c",
      "amountToShares(uint256)": "b811540e",
      "amounts()": "6beaeeae",
      "owner()": "8da5cb5b",
      "paused()": "5c975abb",
      "rebalance()": "7d7c2a1c",
      "renounceOwnership()": "715018a6",
      "requiredLiquidity()": "e366b7bb",
      "shares()": "03314efa",
      "sharesToAmount(uint256)": "555d8ebb",
      "transferOwnership(address)": "f2fde38b",
      "userBalance(address)": "0103c92b"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ctsi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"amountToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"sharesToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"amounts()\":{\"returns\":{\"stake\":\"amount of tokens that can be staked\",\"unstake\":\"amount of tokens that must be unstaked to add liquidity\",\"withdraw\":\"amount of tokens that can be withdrawn to add liquidity\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"amounts()\":{\"notice\":\"provide information for offchain about the amount for each staking operation on the main Staking contract\"},\"rebalance()\":{\"notice\":\"Move tokens from pool to staking or vice-versa, according to required liquidity. If the pool has more liquidity then necessary, it stakes tokens. If the pool has less liquidity then necessary, and has not started an unstake, it unstakes. If the pool has less liquity than necessary, and has started an unstake, it withdraws if possible.\"}},\"notice\":\"This contract takes care of the interaction between the pool and the staking contract It makes sure that there is enough liquidity in the pool to fullfil all unstake request from users, by requesting to withdraw or unstake from Staking contract. The remaining balance is staked.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPoolStakingImpl.sol\":\"StakingPoolStakingImpl\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/pos/contracts/IStaking.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface Staking\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IStaking {\\n    /// @notice Returns total amount of tokens counted as stake\\n    /// @param _userAddress user to retrieve staked balance from\\n    /// @return finalized staked of _userAddress\\n    function getStakedBalance(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the timestamp when next deposit can be finalized\\n    /// @return timestamp of when finalizeStakes() is callable\\n    function getMaturingTimestamp(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the timestamp when next withdraw can be finalized\\n    /// @return timestamp of when finalizeWithdraw() is callable\\n    function getReleasingTimestamp(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the balance waiting/ready to be matured\\n    /// @return amount that will get staked after finalization\\n    function getMaturingBalance(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the balance waiting/ready to be released\\n    /// @return amount that will get withdrew after finalization\\n    function getReleasingBalance(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Deposit CTSI to be staked. The money will turn into staked\\n    ///         balance after timeToStake days\\n    /// @param _amount The amount of tokens that are gonna be deposited.\\n    function stake(uint256 _amount) external;\\n\\n    /// @notice Remove tokens from staked balance. The money can\\n    ///         be released after timeToRelease seconds, if the\\n    ///         function withdraw is called.\\n    /// @param _amount The amount of tokens that are gonna be unstaked.\\n    function unstake(uint256 _amount) external;\\n\\n    /// @notice Transfer tokens to user's wallet.\\n    /// @param _amount The amount of tokens that are gonna be transferred.\\n    function withdraw(uint256 _amount) external;\\n\\n    // events\\n    /// @notice CTSI tokens were deposited, they count as stake after _maturationDate\\n    /// @param user address of msg.sender\\n    /// @param amount amount deposited for staking\\n    /// @param maturationDate date when the stake can be finalized\\n    event Stake(address indexed user, uint256 amount, uint256 maturationDate);\\n\\n    /// @notice Unstake tokens, moving them to releasing structure\\n    /// @param user address of msg.sender\\n    /// @param amount amount of tokens to be released\\n    /// @param maturationDate date when the tokens can be withdrew\\n    event Unstake(address indexed user, uint256 amount, uint256 maturationDate);\\n\\n    /// @notice Withdraw process was finalized\\n    /// @param user address of msg.sender\\n    /// @param amount amount of tokens withdrawn\\n    event Withdraw(address indexed user, uint256 amount);\\n}\\n\",\"keccak256\":\"0xda69ecab096249069100cd857133f717045d19422061ea06d87eca606ac62dd3\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/StakingPoolData.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract StakingPoolData is\\n    Initializable,\\n    PausableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    uint256 public shares; // total number of shares\\n    uint256 public amount; // amount of staked tokens (no matter where it is)\\n    uint256 public requiredLiquidity; // amount of required tokens for withdraw requests\\n\\n    struct UserBalance {\\n        uint256 shares; // amount of shares beloging to this user\\n        uint256 released; // amount of tokens released to this user\\n        uint256 unstakeTimestamp; // timestamp of when user can unstake\\n    }\\n    mapping(address => UserBalance) public userBalance;\\n\\n    function amountToShares(uint256 _amount) public view returns (uint256) {\\n        // TODO: rounding errors\\n        if (amount == 0) {\\n            // no shares yet, return 1 to 1 ratio\\n            return _amount;\\n        }\\n        return (_amount * shares) / amount;\\n    }\\n\\n    function sharesToAmount(uint256 _shares) public view returns (uint256) {\\n        // TODO: rounding errors\\n        if (shares == 0) {\\n            // no shares yet, return 1 to 1 ratio\\n            return _shares;\\n        }\\n        return (_shares * amount) / shares;\\n    }\\n}\\n\",\"keccak256\":\"0xf4071d9ebdf19f1366d7fb6317bf87a89bd27699dfd691ef5e861aa5517664ab\",\"license\":\"Apache-2.0\"},\"contracts/StakingPoolStakingImpl.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@cartesi/pos/contracts/IStaking.sol\\\";\\nimport \\\"./interfaces/StakingPoolStaking.sol\\\";\\nimport \\\"./StakingPoolData.sol\\\";\\n\\n/// @notice This contract takes care of the interaction between the pool and the staking contract\\n/// It makes sure that there is enough liquidity in the pool to fullfil all unstake request from\\n/// users, by requesting to withdraw or unstake from Staking contract.\\n/// The remaining balance is staked.\\ncontract StakingPoolStakingImpl is StakingPoolStaking, StakingPoolData {\\n    IERC20 private immutable ctsi;\\n    IStaking private immutable staking;\\n\\n    constructor(address _ctsi, address _staking) {\\n        ctsi = IERC20(_ctsi);\\n        staking = IStaking(_staking);\\n    }\\n\\n    function __StakingPoolStaking_init() internal {\\n        require(\\n            ctsi.approve(address(staking), type(uint256).max),\\n            \\\"Failed to approve CTSI for staking contract\\\"\\n        );\\n    }\\n\\n    function rebalance() public override {\\n        // get amounts\\n        (uint256 _stake, uint256 _unstake, uint256 _withdraw) = amounts();\\n\\n        // only stake if it is above certain threshold\\n        if (_stake > 0) {\\n            uint256 maturing = staking.getMaturingBalance(address(this));\\n            if (maturing == 0) {\\n                // avoid resetting the clock\\n                // TODO: possible different strategies\\n                staking.stake(_stake);\\n            }\\n        }\\n\\n        if (_unstake > 0) {\\n            // we need to provide liquidity, so don't use a threshold here\\n            staking.unstake(_unstake);\\n        }\\n\\n        if (_withdraw > 0) {\\n            // we need to provide liquidity, so don't use a threshold here\\n            staking.withdraw(_withdraw);\\n        }\\n    }\\n\\n    function amounts()\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 stake,\\n            uint256 unstake,\\n            uint256 withdraw\\n        )\\n    {\\n        // get this contract balance first\\n        uint256 balance = ctsi.balanceOf(address(this));\\n\\n        if (balance > requiredLiquidity) {\\n            // we have spare tokens we can stake\\n            stake = balance - requiredLiquidity;\\n        } else if (requiredLiquidity > balance) {\\n            // we don't have enough tokens to provide liquidity\\n            uint256 missingLiquidity = requiredLiquidity - balance;\\n\\n            // let's first check releasing balance\\n            uint256 releasing = staking.getReleasingBalance(address(this));\\n            if (releasing > 0) {\\n                // some is already releasing\\n\\n                // let's check timestamp to see if we can withdrawn it\\n                uint256 timestamp = staking.getReleasingTimestamp(\\n                    address(this)\\n                );\\n                if (timestamp < block.timestamp) {\\n                    // there it is, let's grab it\\n                    withdraw = releasing;\\n                }\\n\\n                // requiredLiquidity may be more than what is already releasing\\n                // but we won't unstake more to not reset the clock\\n            } else {\\n                // no unstake maturing, let's queue some\\n                unstake = missingLiquidity;\\n            }\\n        } else {\\n            // balance is exactly required liquidity, we can't move any tokens around\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa339f51bb61bd69732d1ba1a9623b648e8aa942b55123a224e8027dce57651a2\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/StakingPoolStaking.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity >=0.7.0;\\n\\n/// @title Interaction between a pool and the staking contract\\n/// @author Danilo Tuler\\n/// @notice This interface models all interactions between a pool and the staking contract,\\n/// including staking, unstaking and withdrawing.\\n/// Tokens staked by pool users will stay at the pool until the pool owner decides to\\n/// stake them in the staking contract. On the other hand, tokens unstaked by pool users\\n/// are added to a required liquidity accumulator, and must be unstaked and withdrawn from\\n/// the staking contract.\\ninterface StakingPoolStaking {\\n    /// @notice Move tokens from pool to staking or vice-versa, according to required liquidity.\\n    /// If the pool has more liquidity then necessary, it stakes tokens.\\n    /// If the pool has less liquidity then necessary, and has not started an unstake, it unstakes.\\n    /// If the pool has less liquity than necessary, and has started an unstake, it withdraws if possible.\\n    function rebalance() external;\\n\\n    /// @notice provide information for offchain about the amount for each\\n    /// staking operation on the main Staking contract\\n    /// @return stake amount of tokens that can be staked\\n    /// @return unstake amount of tokens that must be unstaked to add liquidity\\n    /// @return withdraw amount of tokens that can be withdrawn to add liquidity\\n    function amounts()\\n        external\\n        view\\n        returns (\\n            uint256 stake,\\n            uint256 unstake,\\n            uint256 withdraw\\n        );\\n}\\n\",\"keccak256\":\"0xd79a4bbc8defea295205493352e73802c29a3478fe345b04885eef3cb82c3a25\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 770,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 773,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 965,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 831,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 922,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 650,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 763,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2387,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "shares",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 2389,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "amount",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 2391,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "requiredLiquidity",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 2403,
        "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
        "label": "userBalance",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_struct(UserBalance)2398_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserBalance)2398_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingPoolData.UserBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(UserBalance)2398_storage"
      },
      "t_struct(UserBalance)2398_storage": {
        "encoding": "inplace",
        "label": "struct StakingPoolData.UserBalance",
        "members": [
          {
            "astId": 2393,
            "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2395,
            "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
            "label": "released",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2397,
            "contract": "contracts/StakingPoolStakingImpl.sol:StakingPoolStakingImpl",
            "label": "unstakeTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "amounts()": {
        "notice": "provide information for offchain about the amount for each staking operation on the main Staking contract"
      },
      "rebalance()": {
        "notice": "Move tokens from pool to staking or vice-versa, according to required liquidity. If the pool has more liquidity then necessary, it stakes tokens. If the pool has less liquidity then necessary, and has not started an unstake, it unstakes. If the pool has less liquity than necessary, and has started an unstake, it withdraws if possible."
      }
    },
    "notice": "This contract takes care of the interaction between the pool and the staking contract It makes sure that there is enough liquidity in the pool to fullfil all unstake request from users, by requesting to withdraw or unstake from Staking contract. The remaining balance is staked.",
    "version": 1
  }
}