{
  "contractName": "StakingPoolUser",
  "sourceName": "contracts/interfaces/StakingPoolUser.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getWithdrawBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "author": "Danilo Tuler",
    "events": {
      "Stake(address,uint256,uint256,uint256)": {
        "params": {
          "amount": "amount deposited by the user",
          "shares": "number of shares emitted for user",
          "unlockTimestamp": "instant when the stake can be unstaked",
          "user": "address of msg.sender"
        }
      },
      "Unstake(address,uint256,uint256)": {
        "params": {
          "amount": "amount of tokens to be released",
          "shares": "number of shares being liquidated",
          "user": "address of msg.sender"
        }
      },
      "Withdraw(address,uint256)": {
        "params": {
          "amount": "amount of tokens withdrawn",
          "user": "address of msg.sender"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getWithdrawBalance()": {
        "details": "there is no way to know the exact time in the future the requested tokens will be available",
        "returns": {
          "_0": "the amount of tokens that can be immediately withdrawn by the calling user"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "amount of tokens deposited in the pool"
        }
      },
      "unstake(uint256)": {
        "details": "Shares are immediately converted to tokens, and added to the pool liquidity requirement"
      },
      "withdraw()": {
        "details": "this will transfer all free tokens for the calling user"
      }
    },
    "title": "Interaction between a pool user and a pool",
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "object": "",
      "opcodes": "",
      "sourceMap": ""
    },
    "deployedBytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {},
      "object": "",
      "opcodes": "",
      "sourceMap": ""
    },
    "gasEstimates": null,
    "methodIdentifiers": {
      "getWithdrawBalance()": "710fe6f8",
      "stake(uint256)": "a694fc3a",
      "unstake(uint256)": "2e17de78",
      "withdraw()": "3ccfd60b"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getWithdrawBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Danilo Tuler\",\"events\":{\"Stake(address,uint256,uint256,uint256)\":{\"params\":{\"amount\":\"amount deposited by the user\",\"shares\":\"number of shares emitted for user\",\"unlockTimestamp\":\"instant when the stake can be unstaked\",\"user\":\"address of msg.sender\"}},\"Unstake(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount of tokens to be released\",\"shares\":\"number of shares being liquidated\",\"user\":\"address of msg.sender\"}},\"Withdraw(address,uint256)\":{\"params\":{\"amount\":\"amount of tokens withdrawn\",\"user\":\"address of msg.sender\"}}},\"kind\":\"dev\",\"methods\":{\"getWithdrawBalance()\":{\"details\":\"there is no way to know the exact time in the future the requested tokens will be available\",\"returns\":{\"_0\":\"the amount of tokens that can be immediately withdrawn by the calling user\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"amount of tokens deposited in the pool\"}},\"unstake(uint256)\":{\"details\":\"Shares are immediately converted to tokens, and added to the pool liquidity requirement\"},\"withdraw()\":{\"details\":\"this will transfer all free tokens for the calling user\"}},\"title\":\"Interaction between a pool user and a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Stake(address,uint256,uint256,uint256)\":{\"notice\":\"Tokens were deposited, they count as shares immediatly\"},\"Unstake(address,uint256,uint256)\":{\"notice\":\"Request to unstake tokens. Additional liquidity requested for the pool\"},\"Withdraw(address,uint256)\":{\"notice\":\"Withdraw performed by a user\"}},\"kind\":\"user\",\"methods\":{\"getWithdrawBalance()\":{\"notice\":\"Returns the amount of tokens that can be immediately withdrawn by the calling user\"},\"stake(uint256)\":{\"notice\":\"Stake an amount of tokens, immediately earning pool shares in returns\"},\"unstake(uint256)\":{\"notice\":\"Unstake an specified amount of shares of the calling user\"},\"withdraw()\":{\"notice\":\"Transfer tokens back to calling user wallet\"}},\"notice\":\"This interface models all interactions between a pool user and a pool, including staking, unstaking and withdrawing. A pool user always holds pool shares. When a user stakes tokens, he immediately receive shares. When he unstakes shares he is asking to release tokens. Those tokens need to be withdrawn by an additional call to withdraw()\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/StakingPoolUser.sol\":\"StakingPoolUser\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/StakingPoolUser.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity >=0.7.0;\\n\\n/// @title Interaction between a pool user and a pool\\n/// @author Danilo Tuler\\n/// @notice This interface models all interactions between a pool user and a pool,\\n/// including staking, unstaking and withdrawing. A pool user always holds pool shares.\\n/// When a user stakes tokens, he immediately receive shares. When he unstakes shares\\n/// he is asking to release tokens. Those tokens need to be withdrawn by an additional\\n/// call to withdraw()\\ninterface StakingPoolUser {\\n    /// @notice Stake an amount of tokens, immediately earning pool shares in returns\\n    /// @param amount amount of tokens deposited in the pool\\n    function stake(uint256 amount) external;\\n\\n    /// @notice Unstake an specified amount of shares of the calling user\\n    /// @dev Shares are immediately converted to tokens, and added to the pool liquidity requirement\\n    function unstake(uint256 shares) external;\\n\\n    /// @notice Transfer tokens back to calling user wallet\\n    /// @dev this will transfer all free tokens for the calling user\\n    function withdraw() external;\\n\\n    /// @notice Returns the amount of tokens that can be immediately withdrawn by the calling user\\n    /// @dev there is no way to know the exact time in the future the requested tokens will be available\\n    /// @return the amount of tokens that can be immediately withdrawn by the calling user\\n    function getWithdrawBalance() external returns (uint256);\\n\\n    /// @notice Tokens were deposited, they count as shares immediatly\\n    /// @param user address of msg.sender\\n    /// @param amount amount deposited by the user\\n    /// @param shares number of shares emitted for user\\n    /// @param unlockTimestamp instant when the stake can be unstaked\\n    event Stake(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 shares,\\n        uint256 unlockTimestamp\\n    );\\n\\n    /// @notice Request to unstake tokens. Additional liquidity requested for the pool\\n    /// @param user address of msg.sender\\n    /// @param amount amount of tokens to be released\\n    /// @param shares number of shares being liquidated\\n    event Unstake(address indexed user, uint256 amount, uint256 shares);\\n\\n    /// @notice Withdraw performed by a user\\n    /// @param user address of msg.sender\\n    /// @param amount amount of tokens withdrawn\\n    event Withdraw(address indexed user, uint256 amount);\\n}\\n\",\"keccak256\":\"0x262d7fa510c01d8a13718c9033a498d965397f94f39f886f9e8300be55447bf4\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "events": {
      "Stake(address,uint256,uint256,uint256)": {
        "notice": "Tokens were deposited, they count as shares immediatly"
      },
      "Unstake(address,uint256,uint256)": {
        "notice": "Request to unstake tokens. Additional liquidity requested for the pool"
      },
      "Withdraw(address,uint256)": {
        "notice": "Withdraw performed by a user"
      }
    },
    "kind": "user",
    "methods": {
      "getWithdrawBalance()": {
        "notice": "Returns the amount of tokens that can be immediately withdrawn by the calling user"
      },
      "stake(uint256)": {
        "notice": "Stake an amount of tokens, immediately earning pool shares in returns"
      },
      "unstake(uint256)": {
        "notice": "Unstake an specified amount of shares of the calling user"
      },
      "withdraw()": {
        "notice": "Transfer tokens back to calling user wallet"
      }
    },
    "notice": "This interface models all interactions between a pool user and a pool, including staking, unstaking and withdrawing. A pool user always holds pool shares. When a user stakes tokens, he immediately receive shares. When he unstakes shares he is asking to release tokens. Those tokens need to be withdrawn by an additional call to withdraw()",
    "version": 1
  }
}