{
  "address": "0x5501622b2b4d28d533fB6F9693797b1405BccCBb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referencePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chainlinkOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        }
      ],
      "name": "NewFlatRateCommissionStakingPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        }
      ],
      "name": "NewGasTaxCommissionStakingPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "chainlinkOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        }
      ],
      "name": "createFlatRateCommission",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "createGasTaxCommission",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolImplementationReference",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21a681e74465fa607c14446d7d20d2373975b742046c6a7dba88c40f5169407d",
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0x5501622b2b4d28d533fB6F9693797b1405BccCBb",
    "transactionIndex": 6,
    "gasUsed": "1461319",
    "logsBloom": "0x00000000008000000000000000000000000000000000000000800020000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000001000000000000000000000000000000000000000024000000000",
    "blockHash": "0x238c586a96514cf6df0f99d870ad831b95b486466987e498d1394ed84e0674db",
    "transactionHash": "0x21a681e74465fa607c14446d7d20d2373975b742046c6a7dba88c40f5169407d",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 10531507,
        "transactionHash": "0x21a681e74465fa607c14446d7d20d2373975b742046c6a7dba88c40f5169407d",
        "address": "0x5501622b2b4d28d533fB6F9693797b1405BccCBb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000018930e8a66a1dbe21d00581216789aab7460afd0"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x238c586a96514cf6df0f99d870ad831b95b486466987e498d1394ed84e0674db"
      }
    ],
    "blockNumber": 10531507,
    "cumulativeGasUsed": "1609489",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x349d7A84CEA379479dfE34D1a40E2B4B73C02D58",
    "0xb1344A1c32eAD3042280FD1999efbA9F7c207431",
    "0xE9672a1b38E28b2c6BC8E2539F8BbE15cCff505C"
  ],
  "solcInputHash": "a2db77ccf663f13c899232604d70a49b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referencePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"}],\"name\":\"NewFlatRateCommissionStakingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"}],\"name\":\"NewGasTaxCommissionStakingPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainlinkOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"createFlatRateCommission\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"createGasTaxCommission\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolImplementationReference\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createFlatRateCommission(uint256)\":{\"returns\":{\"_0\":\"new pool address\"}},\"createGasTaxCommission(uint256)\":{\"returns\":{\"_0\":\"new pool address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"NewFlatRateCommissionStakingPool(address,address)\":{\"notice\":\"Event emmited when a pool is created\"},\"NewGasTaxCommissionStakingPool(address,address)\":{\"notice\":\"Event emmited when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"createFlatRateCommission(uint256)\":{\"notice\":\"Creates a new staking pool emits NewStakingPool with the parameters of the new pool\"},\"createGasTaxCommission(uint256)\":{\"notice\":\"Creates a new staking pool using a gas tax commission model emits NewGasTaxCommissionStakingPool with the parameters of the new pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPoolFactoryImpl.sol\":\"StakingPoolFactoryImpl\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/pos/contracts/IPoS.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface PoS\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IPoS {\\n    /// @notice Produce a block\\n    /// @param _index the index of the instance of pos you want to interact with\\n    /// @dev this function can only be called by a worker, user never calls it directly\\n    function produceBlock(uint256 _index) external returns (bool);\\n\\n    /// @notice Get reward manager address\\n    /// @param _index index of instance\\n    /// @return address of instance's RewardManager\\n    function getRewardManagerAddress(uint256 _index)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice Get block selector address\\n    /// @param _index index of instance\\n    /// @return address of instance's block selector\\n    function getBlockSelectorAddress(uint256 _index)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice Get block selector index\\n    /// @param _index index of instance\\n    /// @return index of instance's block selector\\n    function getBlockSelectorIndex(uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Get staking address\\n    /// @param _index index of instance\\n    /// @return address of instance's staking contract\\n    function getStakingAddress(uint256 _index) external view returns (address);\\n\\n    /// @notice Get state of a particular instance\\n    /// @param _index index of instance\\n    /// @param _user address of user\\n    /// @return bool if user is eligible to produce next block\\n    /// @return address of user that was chosen to build the block\\n    /// @return current reward paid by the network for that block\\n    function getState(uint256 _index, address _user)\\n        external\\n        view\\n        returns (\\n            bool,\\n            address,\\n            uint256\\n        );\\n\\n    function terminate(uint256 _index) external;\\n}\\n\",\"keccak256\":\"0xf22d440f723b8d80ef60a20bf38f5a3ea16fd604a2c485e1c969bec0b24e8889\",\"license\":\"Apache-2.0\"},\"@cartesi/pos/contracts/IRewardManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface RewardManager\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IRewardManager {\\n    /// @notice Rewards address\\n    /// @param _address address be rewarded\\n    /// @param _amount reward\\n    /// @dev only the pos contract can call this\\n    function reward(address _address, uint256 _amount) external;\\n\\n    /// @notice Get RewardManager's balance\\n    function getBalance() external view returns (uint256);\\n\\n    /// @notice Get current reward amount\\n    function getCurrentReward() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf3d3fb9853d55c0658f45dfd072032291c975138e99cd8cedb0d6550848e2813\",\"license\":\"Apache-2.0\"},\"@cartesi/pos/contracts/IStaking.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface Staking\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IStaking {\\n    /// @notice Returns total amount of tokens counted as stake\\n    /// @param _userAddress user to retrieve staked balance from\\n    /// @return finalized staked of _userAddress\\n    function getStakedBalance(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the timestamp when next deposit can be finalized\\n    /// @return timestamp of when finalizeStakes() is callable\\n    function getMaturingTimestamp(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the timestamp when next withdraw can be finalized\\n    /// @return timestamp of when finalizeWithdraw() is callable\\n    function getReleasingTimestamp(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the balance waiting/ready to be matured\\n    /// @return amount that will get staked after finalization\\n    function getMaturingBalance(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the balance waiting/ready to be released\\n    /// @return amount that will get withdrew after finalization\\n    function getReleasingBalance(address _userAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Deposit CTSI to be staked. The money will turn into staked\\n    ///         balance after timeToStake days\\n    /// @param _amount The amount of tokens that are gonna be deposited.\\n    function stake(uint256 _amount) external;\\n\\n    /// @notice Remove tokens from staked balance. The money can\\n    ///         be released after timeToRelease seconds, if the\\n    ///         function withdraw is called.\\n    /// @param _amount The amount of tokens that are gonna be unstaked.\\n    function unstake(uint256 _amount) external;\\n\\n    /// @notice Transfer tokens to user's wallet.\\n    /// @param _amount The amount of tokens that are gonna be transferred.\\n    function withdraw(uint256 _amount) external;\\n\\n    // events\\n    /// @notice CTSI tokens were deposited, they count as stake after _maturationDate\\n    /// @param user address of msg.sender\\n    /// @param amount amount deposited for staking\\n    /// @param maturationDate date when the stake can be finalized\\n    event Stake(address indexed user, uint256 amount, uint256 maturationDate);\\n\\n    /// @notice Unstake tokens, moving them to releasing structure\\n    /// @param user address of msg.sender\\n    /// @param amount amount of tokens to be released\\n    /// @param maturationDate date when the tokens can be withdrew\\n    event Unstake(address indexed user, uint256 amount, uint256 maturationDate);\\n\\n    /// @notice Withdraw process was finalized\\n    /// @param user address of msg.sender\\n    /// @param amount amount of tokens withdrawn\\n    event Withdraw(address indexed user, uint256 amount);\\n}\\n\",\"keccak256\":\"0xda69ecab096249069100cd857133f717045d19422061ea06d87eca606ac62dd3\",\"license\":\"Apache-2.0\"},\"@cartesi/pos/contracts/IWorkerManagerAuthManager.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface WorkerManager\\n/// @author Danilo Tuler\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IWorkerManagerAuthManager {\\n    /// @notice Asks the worker to work for the sender. Sender needs to pay something.\\n    /// @param workerAddress address of the worker\\n    function hire(address payable workerAddress) external payable;\\n\\n    /// @notice Called by the user to cancel a job offer\\n    /// @param workerAddress address of the worker node\\n    function cancelHire(address workerAddress) external;\\n\\n    /// @notice Called by the user to retire his worker.\\n    /// @param workerAddress address of the worker to be retired\\n    /// @dev this also removes all authorizations in place\\n    function retire(address payable workerAddress) external;\\n\\n    /// @notice Gives worker permission to act on a DApp\\n    /// @param _workerAddress address of the worker node to given permission\\n    /// @param _dappAddress address of the dapp that permission will be given to\\n    function authorize(address _workerAddress, address _dappAddress) external;\\n\\n    /// @notice Called by the worker to accept the job\\n    function acceptJob() external;\\n\\n    /// @notice Called by the worker to reject a job offer\\n    function rejectJob() external payable;\\n}\\n\",\"keccak256\":\"0x81c78ff7141cedf3cb3c70537b557baf88070a4d374a5967c5a65e0b865e9b46\",\"license\":\"Apache-2.0\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\",\"keccak256\":\"0x1a5dc81544a6479f64437a8aca22c869769dd54ee3522c7ef5ebae0d329a28f0\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\\n\",\"keccak256\":\"0x942ef29bd7c0f62228aeb91879ddd1ba101f52a2162970d3e48adffa498f4483\"},\"@ensdomains/ens-contracts/contracts/registry/ReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\n\\nabstract contract NameResolver {\\n    function setName(bytes32 node, string memory name) public virtual;\\n}\\n\\ncontract ReverseRegistrar {\\n    // namehash('addr.reverse')\\n    bytes32 public constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    ENS public ens;\\n    NameResolver public defaultResolver;\\n\\n    /**\\n     * @dev Constructor\\n     * @param ensAddr The address of the ENS registry.\\n     * @param resolverAddr The address of the default reverse resolver.\\n     */\\n    constructor(ENS ensAddr, NameResolver resolverAddr) public {\\n        ens = ensAddr;\\n        defaultResolver = resolverAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claim(address owner) public returns (bytes32) {\\n        return claimWithResolver(owner, address(0x0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse ENS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in ENS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver) public returns (bytes32) {\\n        bytes32 label = sha3HexAddress(msg.sender);\\n        bytes32 node = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, label));\\n        address currentOwner = ens.owner(node);\\n\\n        // Update the resolver if required\\n        if (resolver != address(0x0) && resolver != ens.resolver(node)) {\\n            // Transfer the name to us first if it's not already\\n            if (currentOwner != address(this)) {\\n                ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, address(this));\\n                currentOwner = address(this);\\n            }\\n            ens.setResolver(node, resolver);\\n        }\\n\\n        // Update the owner if required\\n        if (currentOwner != owner) {\\n            ens.setSubnodeOwner(ADDR_REVERSE_NODE, label, owner);\\n        }\\n\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public returns (bytes32) {\\n        bytes32 node = claimWithResolver(address(this), address(defaultResolver));\\n        defaultResolver.setName(node, name);\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        addr;\\n        ret; // Stop warning us about unused variables\\n        assembly {\\n            let lookup := 0x3031323334353637383961626364656600000000000000000000000000000000\\n\\n            for { let i := 40 } gt(i, 0) { } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0954bb8471f1f58353106f19c05b57f75349579afc5ab296b800b3df906907ee\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x90dec20805396efc780a82c62578626103e03278bc1f48b61bb3aba52a61617c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/Fee.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma solidity ^0.8.0;\\n\\ninterface Fee {\\n    /// @notice calculates the total amount of the reward that will be directed to the PoolManager\\n    /// @return commissionTotal is the amount subtracted from the rewardAmount\\n    function getCommission(uint256 posIndex, uint256 rewardAmount)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xd17a0058b5ef0f8734e102538622187c99d00d19f49ae7c4946004e55c1b9f6e\",\"license\":\"Apache-2.0\"},\"contracts/FlatRateCommission.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Fee.sol\\\";\\n\\ncontract FlatRateCommission is Fee, Ownable {\\n    uint256 public BASE = 1E4;\\n    uint256 public rate;\\n\\n    /// @notice Event emmited when a contract is created\\n    /// @param commission commission charged by the pool\\n    event FlatRateCommissionCreated(uint256 commission);\\n\\n    /// @notice event fired when setRate function is called and successful\\n    event FlatRateChanged(uint256 newRate);\\n\\n    constructor(uint256 _rate) {\\n        rate = _rate;\\n        emit FlatRateChanged(_rate);\\n    }\\n\\n    /// @notice calculates the total amount of the reward that will be directed to the PoolManager\\n    /// @return commissionTotal is the amount subtracted from the rewardAmount\\n    function getCommission(uint256, uint256 rewardAmount)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return (rewardAmount * rate) / BASE;\\n    }\\n\\n    /// @notice allows for the poolManager to reduce how much they want to charge for the block production tx\\n    function setRate(uint256 newRate) external onlyOwner {\\n        require(\\n            newRate < rate,\\n            \\\"newRate needs to be strictly smaller than current rate.\\\"\\n        );\\n        rate = newRate;\\n        emit FlatRateChanged(newRate);\\n    }\\n}\\n\",\"keccak256\":\"0xedf7e982e1ca0b98782a21deef8d3e6b28daf7ffc500d751456ec69c22f4917a\",\"license\":\"Apache-2.0\"},\"contracts/GasTaxCommission.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Fee.sol\\\";\\n\\ncontract GasTaxCommission is Fee, Ownable {\\n    AggregatorInterface public immutable gasOracle;\\n\\n    IUniswapV2Pair public immutable priceOracle;\\n\\n    uint256 public gas;\\n\\n    /// @notice event fired when setGas function is called and successful\\n    event GasTaxChanged(uint256 newGas);\\n\\n    constructor(\\n        address _chainlinkOracle,\\n        address _uniswapOracle,\\n        uint256 _gas\\n    ) {\\n        gasOracle = AggregatorInterface(_chainlinkOracle);\\n        priceOracle = IUniswapV2Pair(_uniswapOracle);\\n        gas = _gas;\\n        emit GasTaxChanged(_gas);\\n    }\\n\\n    /// @notice calculates the total amount of the reward that will be directed to the PoolManager\\n    /// @return commissionTotal is the amount subtracted from the rewardAmount\\n    function getCommission(uint256, uint256 rewardAmount)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        // get gas price from chainlink oracle\\n        // https://data.chain.link/fast-gas-gwei#operator-chainlayer\\n        uint256 gasPrice = uint256(gasOracle.latestAnswer());\\n\\n        // gas fee (in ETH) charged by pool manager\\n        uint256 gasFee = gasPrice * gas;\\n\\n        // get CTSI/ETH reserves\\n        (uint112 reserveCTSI, uint112 reserveETH, uint32 _blockTimestampLast) =\\n            priceOracle.getReserves();\\n\\n        // convert gas in ETH to gas in CTSI\\n\\n        // if there is no ETH reserve, we can't calculate\\n        if (reserveETH == 0) {\\n            return 0;\\n        }\\n        uint256 gasFeeCTSI = (gasFee * reserveCTSI) / reserveETH;\\n\\n        // this is the commission, maxed by the reward\\n        return gasFeeCTSI > rewardAmount ? rewardAmount : gasFeeCTSI;\\n    }\\n\\n    /// @notice allows for the poolManager to reduce how much they want to charge for the block production tx\\n    function setGas(uint256 newGasCommission) external onlyOwner {\\n        require(\\n            newGasCommission < gas,\\n            \\\"newGasCommission needs to be strictly smaller than the current value.\\\"\\n        );\\n        gas = newGasCommission;\\n        emit GasTaxChanged(newGasCommission);\\n    }\\n}\\n\",\"keccak256\":\"0x9226379d9110b4950b709fa1f32f11e802970c5fc3cbb44e06fb59bedd5c493d\",\"license\":\"Apache-2.0\"},\"contracts/StakingPool.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma solidity ^0.8.0;\\n\\nimport \\\"@cartesi/pos/contracts/IStaking.sol\\\";\\nimport \\\"./StakingPoolManagement.sol\\\";\\n\\ninterface StakingPool is IStaking, StakingPoolManagement {\\n    ///@notice this events is emitted at every produceBlock call\\n    ///     reward is the block reward\\n    ///     commission is how much CTSI is directed to the poolManager\\n    ///     queued is how much currently is being queued to be staked\\n    ///     notStaked is how much is directed to withdrawal\\n    event BlockProduced(\\n        uint256 reward,\\n        uint256 commission,\\n        uint256 queued,\\n        uint256 notStaked\\n    );\\n\\n    /// @notice routes produceBlock to POS contract and\\n    /// updates internal states of the pool\\n    /// @return true when everything went fine\\n    function produceBlock(uint256 _index) external returns (bool);\\n\\n    /// @notice enables pool manager to update staking balances as they mature\\n    /// on the (main) Staking contract\\n    function cycleStakeMaturation() external;\\n\\n    /// @notice enables pool manager to update releasing balances as they get freed\\n    /// on the (main) Staking contract\\n    function cycleWithdrawRelease() external;\\n\\n    /// @notice checks whether or not a call can be made to cycleStakeMaturation\\n    /// and be successful\\n    /// @return available true if cycleStakeMaturation can bee called\\n    ///                   false if it can not\\n    ///         _currentQueuedTotal how much is waiting to be staked\\n    function canCycleStakeMaturation()\\n        external\\n        view\\n        returns (bool available, uint256 _currentQueuedTotal, uint256 _currentMaturingTotal);\\n\\n    /// @notice checks whether or not a call can be made to cycleWithdrawRelease\\n    /// and be successful\\n    /// @return available true if cycleWithdrawRelease can bee called\\n    ///                   false if it can not\\n    ///         _totalToUnstakeValue how much is waiting to be unstaked\\n    function canCycleWithdrawRelease()\\n        external\\n        view\\n        returns (bool available, uint256 _totalToUnstakeValue, uint256 _totalUnstaking);\\n}\\n\",\"keccak256\":\"0x97758e1e0c614c8e6b2614601d906b0cecfdcecd56acd8595bd907a1ccfb92ae\",\"license\":\"Apache-2.0\"},\"contracts/StakingPoolFactory.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma solidity ^0.8.0;\\n\\ninterface StakingPoolFactory {\\n    /// @notice Creates a new staking pool using a flat commission model\\n    /// emits NewFlatRateCommissionStakingPool with the parameters of the new pool\\n    /// @return new pool address\\n    function createFlatRateCommission(uint256 commission)\\n        external\\n        payable\\n        returns (address);\\n\\n    /// @notice Creates a new staking pool using a gas tax commission model\\n    /// emits NewGasTaxCommissionStakingPool with the parameters of the new pool\\n    /// @return new pool address\\n    function createGasTaxCommission(uint256 gas)\\n        external\\n        payable\\n        returns (address);\\n\\n    /// @notice Event emmited when a pool is created\\n    /// @param pool address of the new pool\\n    /// @param fee address of the commission contract\\n    event NewFlatRateCommissionStakingPool(address indexed pool, address fee);\\n\\n    /// @notice Event emmited when a pool is created\\n    /// @param pool address of the new pool\\n    /// @param fee address of thhe commission contract\\n    event NewGasTaxCommissionStakingPool(address indexed pool, address fee);\\n}\\n\",\"keccak256\":\"0x65d1773af451c162c8d944eb293db3434f202c286c85ce1b75e28159c90e6764\",\"license\":\"Apache-2.0\"},\"contracts/StakingPoolFactoryImpl.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./StakingPoolFactory.sol\\\";\\nimport \\\"./StakingPoolImpl.sol\\\";\\nimport \\\"./FlatRateCommission.sol\\\";\\nimport \\\"./GasTaxCommission.sol\\\";\\n\\ncontract StakingPoolFactoryImpl is Ownable, Pausable, StakingPoolFactory {\\n    address public immutable poolImplementationReference;\\n    address public immutable chainlinkOracle;\\n    address public immutable uniswapOracle;\\n\\n    constructor(\\n        address _referencePool,\\n        address _chainlinkOracle,\\n        address _uniswapOracle\\n    ) {\\n        require(\\n            _referencePool != address(0),\\n            \\\"parameter can not be zero address.\\\"\\n        );\\n        require(\\n            _chainlinkOracle != address(0),\\n            \\\"parameter can not be zero address.\\\"\\n        );\\n        require(\\n            _uniswapOracle != address(0),\\n            \\\"parameter can not be zero address.\\\"\\n        );\\n        poolImplementationReference = _referencePool;\\n        chainlinkOracle = _chainlinkOracle;\\n        uniswapOracle = _uniswapOracle;\\n    }\\n\\n    /// @notice Creates a new staking pool\\n    /// emits NewStakingPool with the parameters of the new pool\\n    /// @return new pool address\\n    function createFlatRateCommission(uint256 commission)\\n        public\\n        payable\\n        override\\n        whenNotPaused\\n        returns (address)\\n    {\\n        FlatRateCommission fee = new FlatRateCommission(commission);\\n        address payable deployed =\\n            payable(Clones.clone(poolImplementationReference));\\n        StakingPoolImpl pool = StakingPoolImpl(deployed);\\n        pool.initialize(address(fee), msg.sender);\\n        fee.transferOwnership(msg.sender);\\n        pool.selfhire{value: msg.value}();\\n\\n        emit NewFlatRateCommissionStakingPool(address(pool), address(fee));\\n        return address(pool);\\n    }\\n\\n    function createGasTaxCommission(uint256 gas)\\n        public\\n        payable\\n        override\\n        whenNotPaused\\n        returns (address)\\n    {\\n        GasTaxCommission fee =\\n            new GasTaxCommission(chainlinkOracle, uniswapOracle, gas);\\n        address payable deployed =\\n            payable(Clones.clone(poolImplementationReference));\\n        StakingPoolImpl pool = StakingPoolImpl(deployed);\\n        pool.initialize(address(fee), msg.sender);\\n        fee.transferOwnership(msg.sender);\\n        pool.selfhire{value: msg.value}();\\n\\n        emit NewGasTaxCommissionStakingPool(address(pool), address(fee));\\n        return address(pool);\\n    }\\n\\n    function pause() public whenNotPaused onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public whenPaused onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x875d4caa7f49024d8efdd75bd967cbe568aedfe2e48fd50985c3e05ef68cc29a\",\"license\":\"Apache-2.0\"},\"contracts/StakingPoolImpl.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@cartesi/pos/contracts/IRewardManager.sol\\\";\\nimport \\\"@cartesi/pos/contracts/IStaking.sol\\\";\\nimport \\\"./StakingPool.sol\\\";\\nimport \\\"./Fee.sol\\\";\\nimport \\\"./StakingPoolManagementImpl.sol\\\";\\n\\ncontract StakingPoolImpl is StakingPool, StakingPoolManagementImpl {\\n    IERC20 public immutable ctsi;\\n    IStaking public immutable staking;\\n\\n    Fee public fee;\\n    uint256 public rewardQueued;\\n    uint256 public rewardNotStaked;\\n    uint256 public rewardMaturing;\\n    uint256 public currentStakeEpoch;\\n    uint256 public currentUnstakeEpoch;\\n\\n    uint256 public immutable timeToStake;\\n    uint256 public immutable timeToRelease;\\n\\n    struct StakingVoucher {\\n        uint256 amountQueued;\\n        uint256 amountStaked;\\n        uint256 queueEpoch;\\n    }\\n\\n    struct UnstakingVoucher {\\n        uint256 poolShares;\\n        uint256 queueEpoch;\\n    }\\n\\n    struct UserBalance {\\n        // @TODO improve state usage reducing variable sizes\\n        uint256 stakedPoolShares;\\n        StakingVoucher stakingVoucher;\\n        UnstakingVoucher unstakingVoucher;\\n    }\\n    mapping(address => UserBalance) public userBalance;\\n    uint256 public immutable FIXED_POINT_DECIMALS = 10E5; //@DEV is this enough zero/precision?\\n    // this gets updated on every reward income\\n    uint256[] public stakingVoucherValueAtEpoch; // correction factor for balances outdated by new rewards\\n    uint256 public currentQueuedTotal; // next cycle staking amout\\n    uint256 public currentMaturingTotal; // current cycle staking maturing\\n    uint256 public totalStaked; // \\\"same as\\\" StakeImp.getStakedBalance(this)\\n    uint256 public totalStakedShares;\\n    // this tracks the ratio of balances to actual CTSI value\\n    // withdraw related variables\\n    uint256 public totalToUnstakeShares; // next withdraw cycle unstake amount\\n    uint256 public totalUnstaking; // current withdraw cycle unstaking amount\\n    uint256 public totalWithdrawable; // ready to withdraw user balances\\n    uint256 public totalUnstakedShares; // tracks shares balances\\n\\n    // all immutable variables can stay at the constructor\\n    constructor(\\n        address _ctsi,\\n        address _staking,\\n        address _pos,\\n        uint256 _timeToStake,\\n        uint256 _timeToRelease,\\n        address _ens,\\n        address _workerManager\\n    ) StakingPoolManagementImpl(_ens, _workerManager, _pos) {\\n        require(_ctsi != address(0), \\\"parameter can not be zero address\\\");\\n        require(_staking != address(0), \\\"parameter can not be zero address\\\");\\n\\n        ctsi = IERC20(_ctsi);\\n        staking = IStaking(_staking);\\n        timeToStake = _timeToStake;\\n        timeToRelease = _timeToRelease;\\n    }\\n\\n    function initialize(address _feeAddress, address owner) public initializer {\\n        super.initialize(owner);\\n        require(\\n            ctsi.approve(address(staking), type(uint256).max),\\n            \\\"Failed to approve CTSI for staking contract\\\"\\n        );\\n        fee = Fee(_feeAddress);\\n    }\\n\\n    /// @notice Returns total amount of tokens counted as stake\\n    /// @param _userAddress user to retrieve staked balance from\\n    /// @return stakedBalance is the finalized staked of _userAddress\\n    function getStakedBalance(address _userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256 stakedBalance)\\n    {\\n        UserBalance storage b = userBalance[_userAddress];\\n        uint256 shares = _getUserMaturatedShares(b.stakingVoucher);\\n        uint256 withdrawBalance;\\n        uint256 stakedValue = 0;\\n        // since it didn't call staking.unstake() yet, it's balance still counts for reward\\n        if (b.unstakingVoucher.queueEpoch < currentUnstakeEpoch)\\n            withdrawBalance = b.unstakingVoucher.poolShares;\\n        if (totalStakedShares > 0) {\\n            shares += b.stakedPoolShares - withdrawBalance;\\n            stakedValue = _getStakedSharesInValue(shares);\\n        }\\n        if (staking.getMaturingTimestamp(address(this)) < block.timestamp) {\\n            // effectively 1 cycle has passed and we didn't compute yet\\n            uint256 _currentStakeEpoch = currentStakeEpoch + 1;\\n            if (b.stakingVoucher.queueEpoch + 1 == _currentStakeEpoch) {\\n                stakedValue += b.stakingVoucher.amountStaked;\\n            } else if (b.stakingVoucher.queueEpoch + 2 == _currentStakeEpoch) {\\n                stakedValue += b.stakingVoucher.amountQueued;\\n            }\\n        }\\n\\n        return stakedValue;\\n    }\\n\\n    /// @notice Returns the timestamp when next deposit can be finalized\\n    /// @return timestamp of when cycleStakeMaturation() is callable\\n    function getMaturingTimestamp(address _userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (\\n            userBalance[_userAddress].stakingVoucher.queueEpoch + 1 ==\\n            currentStakeEpoch\\n        ) return staking.getMaturingTimestamp(address(this));\\n        if (\\n            userBalance[_userAddress].stakingVoucher.queueEpoch ==\\n            currentStakeEpoch\\n        ) return staking.getMaturingTimestamp(address(this)) + timeToStake;\\n        return 0;\\n    }\\n\\n    /// @notice Returns the timestamp when next withdraw can be finalized\\n    /// @return timestamp of when withdraw() is callable\\n    function getReleasingTimestamp(address _userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 wEpoch = userBalance[_userAddress].unstakingVoucher.queueEpoch;\\n        if (wEpoch + 1 == currentUnstakeEpoch) {\\n            return staking.getReleasingTimestamp(address(this));\\n        } else if (\\n            staking.getReleasingBalance(address(this)) > 0 &&\\n            wEpoch == currentUnstakeEpoch\\n        ) {\\n            return staking.getReleasingTimestamp(address(this)) + timeToRelease;\\n        } else if (wEpoch == currentUnstakeEpoch) {\\n            return block.timestamp + timeToRelease;\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice Returns the balance waiting/ready to be matured\\n    /// @return amount that will get staked after finalization\\n    function getMaturingBalance(address _userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        UserBalance storage b = userBalance[_userAddress];\\n        uint256 maturingBalance = 0;\\n        uint256 _currentStakeEpoch = currentStakeEpoch;\\n        if (staking.getMaturingTimestamp(address(this)) < block.timestamp)\\n            _currentStakeEpoch++;\\n        // if more than one cycle has passed for amountStaked then it's vested already\\n        if (b.stakingVoucher.queueEpoch + 1 > _currentStakeEpoch)\\n            maturingBalance += b.stakingVoucher.amountStaked;\\n        // if more than 2 cycles has passed for amountQueued then it's vested already\\n        if (b.stakingVoucher.queueEpoch + 2 > _currentStakeEpoch)\\n            maturingBalance += b.stakingVoucher.amountQueued;\\n        return maturingBalance;\\n    }\\n\\n    /// @notice Returns the balance waiting/ready to be released\\n    /// @return amount that will get withdrawn after finalization\\n    function getReleasingBalance(address _userAddress)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        UnstakingVoucher storage voucher =\\n            userBalance[_userAddress].unstakingVoucher;\\n        // releasing balance still was not unstaked on IStaking\\n        if (voucher.queueEpoch == currentUnstakeEpoch && totalStakedShares != 0)\\n            return _getStakedSharesInValue(voucher.poolShares);\\n\\n        // releasing(ed) balance was unstaked on IStaking\\n        if (\\n            voucher.queueEpoch + 1 <= currentUnstakeEpoch &&\\n            totalUnstakedShares != 0\\n        ) return _getUnstakedSharesInValue(voucher.poolShares);\\n        // avoid division by zero in some scenarios\\n        return 0;\\n    }\\n\\n    /// @notice Deposit CTSI to be staked. The money will turn into staked\\n    ///         balance after timeToStake days\\n    /// @param _amount The amount of tokens that are gonna be additionally deposited.\\n    function stake(uint256 _amount) external override whenNotPaused {\\n        require(\\n            ctsi.transferFrom(msg.sender, address(this), _amount),\\n            \\\"Allowance of CTSI tokens not enough to match amount sent\\\"\\n        );\\n        _stakeUpdates(msg.sender, _amount);\\n    }\\n\\n    /// @notice routes produceBlock to POS contract and\\n    /// updates internal states of the pool\\n    /// @return true when everything went fine\\n    function produceBlock(uint256 _index) external override returns (bool) {\\n        bool isLastStakeCycleOver =\\n            staking.getMaturingTimestamp(address(this)) <= block.timestamp;\\n        if (isLastStakeCycleOver) computeFinishedStake();\\n\\n        uint256 reward =\\n            IRewardManager(pos.getRewardManagerAddress(_index))\\n                .getCurrentReward();\\n\\n        pos.produceBlock(_index);\\n\\n        uint256 commission = fee.getCommission(_index, reward);\\n        _stakeUpdates(owner(), commission); // directs the commission to the pool manager\\n\\n        uint256 remainingReward = reward - commission; // this is also a safety check\\n        // if commission is over the reward amount, it will underflow\\n\\n        // we first route rewards related to unstakingShares to withdrawal\\n        // then we add the rest to the staking queue\\n        uint256 additionalRewardsWithdrawal =\\n            _calcUnstakingRewards(remainingReward + rewardQueued);\\n        rewardNotStaked += additionalRewardsWithdrawal;\\n\\n        // update the possible remaining reward to be staked\\n        rewardQueued =\\n            (remainingReward + rewardQueued) -\\n            additionalRewardsWithdrawal;\\n\\n        emit BlockProduced(reward, commission, rewardQueued, rewardNotStaked);\\n\\n        if (isLastStakeCycleOver) startNewStakeCycle();\\n        cycleWithdrawRelease();\\n        return true;\\n    }\\n\\n    /// @notice Remove tokens from staked balance. The money can\\n    ///         be released after timeToRelease seconds, if the\\n    ///         function withdraw is called.\\n    /// @param _amount The amount of tokens that are gonna be unstaked.\\n    function unstake(uint256 _amount) external override {\\n        UserBalance storage user = userBalance[msg.sender];\\n        require(\\n            user.unstakingVoucher.poolShares == 0 ||\\n                user.unstakingVoucher.queueEpoch == currentUnstakeEpoch,\\n            \\\"You have withdraw being processed\\\"\\n        );\\n\\n        _updateUserBalances(msg.sender); // makes sure balances are updated to shares\\n\\n        uint256 _amountInShares = _getStakedValueInShares(_amount);\\n        require(_amountInShares > 0, \\\"there are no shares to be unstaked\\\");\\n        user.unstakingVoucher.poolShares += _amountInShares;\\n\\n        require(\\n            user.stakedPoolShares >= user.unstakingVoucher.poolShares,\\n            \\\"Unstake amount is over staked balance\\\"\\n        );\\n\\n        totalToUnstakeShares += _amountInShares;\\n        user.unstakingVoucher.queueEpoch = currentUnstakeEpoch;\\n\\n        uint256 releaseTimestamp;\\n        if (staking.getReleasingBalance(address(this)) > 0)\\n            releaseTimestamp = staking.getReleasingTimestamp(address(this));\\n        else {\\n            releaseTimestamp = block.timestamp;\\n        }\\n\\n        emit Unstake(msg.sender, _amount, releaseTimestamp + timeToRelease);\\n    }\\n\\n    /// @notice Transfer tokens to user's wallet.\\n    /// @param _amount The amount of tokens that are gonna be transferred.\\n    function withdraw(uint256 _amount) external override {\\n        UserBalance storage user = userBalance[msg.sender];\\n        require(\\n            user.unstakingVoucher.poolShares > 0 &&\\n                user.unstakingVoucher.queueEpoch + 2 <= currentUnstakeEpoch,\\n            \\\"You don't have realeased balance\\\"\\n        );\\n        _updateUserBalances(msg.sender); // makes sure balances are updated to matured\\n        uint256 shares = _getUnstakedValueInShares(_amount);\\n        require(\\n            user.unstakingVoucher.poolShares >= shares,\\n            \\\"Not enough balance for this withdraw amount\\\"\\n        );\\n        user.unstakingVoucher.poolShares -= shares;\\n        user.stakedPoolShares -= shares;\\n\\n        totalWithdrawable -= _amount;\\n        totalUnstakedShares -= shares;\\n        ctsi.transfer(msg.sender, _amount);\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    function _calcUnstakingRewards(uint256 rewards)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // @dev review this function when totalStakedShares is Zero.\\n        // total value related to totalStakedShares\\n        uint256 totalAccumulatedValue =\\n            totalStaked + rewardMaturing + rewardNotStaked + rewards;\\n        // value that will be made available to withdraw in the next full withdraw cycle\\n        uint256 totalToUnstakeValue =\\n            (totalToUnstakeShares * totalAccumulatedValue) / totalStakedShares;\\n        // additional value related to current rewards yet to be set aside\\n        uint256 toUnstakeValueNotAccounted =\\n            totalToUnstakeValue - rewardNotStaked;\\n        if (rewards > toUnstakeValueNotAccounted)\\n            return toUnstakeValueNotAccounted;\\n        return rewards; // all this reward will be added to rewardNotStaked\\n    }\\n\\n    function _calcValueAtEpoch() internal view returns (uint256) {\\n        // first time weight is 1\\n        if (currentStakeEpoch == 1) {\\n            return FIXED_POINT_DECIMALS;\\n        }\\n        // the `ValueAtEpoch` factor is the same as 1 unit of value in shares\\n        return _getStakedValueInShares(1);\\n    }\\n\\n    function _calcTotalShares(uint256 valueAtEpoch)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // rewards do not count shares, so we subtract them\\n        uint256 newStakedValue = currentMaturingTotal - rewardMaturing;\\n        uint256 additionalShares = newStakedValue * valueAtEpoch;\\n        return totalStakedShares + additionalShares;\\n    }\\n\\n    /// @notice called when a stake is matured in StakeImpl\\n    /// updating internal state related to it\\n    function computeFinishedStake() internal {\\n        if (currentStakeEpoch >= 1) {\\n            uint256 _valueAtEpoch = _calcValueAtEpoch();\\n            totalStakedShares = _calcTotalShares(_valueAtEpoch);\\n            stakingVoucherValueAtEpoch.push(_valueAtEpoch);\\n            totalStaked = totalStaked + currentMaturingTotal;\\n            // now we add this because we migth have intermediate\\n            // calculations that use this state var\\n            currentMaturingTotal = 0;\\n        }\\n    }\\n\\n    /// @notice called after the finish of cycle\\n    /// to start with a new stake and reset global state vars\\n    function startNewStakeCycle() internal {\\n        currentMaturingTotal = currentQueuedTotal + rewardQueued;\\n        if (currentMaturingTotal != 0) staking.stake(currentMaturingTotal);\\n        rewardMaturing = rewardQueued;\\n        rewardQueued = 0;\\n        currentQueuedTotal = 0;\\n        currentStakeEpoch++;\\n    }\\n\\n    /// @notice enables pool manager to update staking balances as they mature\\n    /// on the (main) Staking contract\\n    function cycleStakeMaturation() public override {\\n        bool isLastStakeCycleOver =\\n            staking.getMaturingTimestamp(address(this)) <= block.timestamp;\\n        if (!isLastStakeCycleOver) return;\\n        computeFinishedStake();\\n        startNewStakeCycle();\\n    }\\n\\n    /// @notice enables pool manager to update staking balances as they mature\\n    /// on the (main) Staking contract\\n    function cycleWithdrawRelease() public override {\\n        uint256 releasingBalance = staking.getReleasingBalance(address(this));\\n        if (\\n            releasingBalance > 0 &&\\n            staking.getReleasingTimestamp(address(this)) > block.timestamp\\n        ) return; // last release cycle hasn't finished\\n\\n        if (totalToUnstakeShares == 0 && totalUnstaking == 0) return; // nothing to do\\n\\n        // withdraw everything to this contract before reseting the clock\\n        if (releasingBalance > 0) staking.withdraw(releasingBalance);\\n\\n        uint256 totalToUnstake = 0;\\n        if (totalToUnstakeShares > 0) {\\n            totalToUnstake =\\n                _getStakedSharesInValue(totalToUnstakeShares) -\\n                rewardNotStaked;\\n            if (totalToUnstake > 0) {\\n                staking.unstake(totalToUnstake);\\n                totalStaked = totalStaked - totalToUnstake;\\n            }\\n        }\\n\\n        // reset the cycle\\n        totalStakedShares -= totalToUnstakeShares;\\n        totalUnstakedShares += totalToUnstakeShares;\\n        totalToUnstakeShares = 0;\\n        totalWithdrawable += totalUnstaking + rewardNotStaked;\\n        rewardNotStaked = 0;\\n        totalUnstaking = totalToUnstake;\\n        currentUnstakeEpoch += 1;\\n    }\\n\\n    /// @notice this function updates stale balance structure for a user\\n    /// it has basically 2 scenarios: user is staking since 1 epoch\\n    /// or it's staking since 2 or more epochs\\n    function _updateUserBalances(address _user) internal {\\n        UserBalance storage user = userBalance[_user];\\n        uint256 userLastUpdateEpoch = user.stakingVoucher.queueEpoch;\\n        if (\\n            (user.stakingVoucher.amountQueued == 0 &&\\n                user.stakingVoucher.amountStaked == 0) ||\\n            userLastUpdateEpoch == currentStakeEpoch\\n        ) return; // nothing to do; all up-to-date\\n\\n        user.stakedPoolShares += _getUserMaturatedShares(user.stakingVoucher);\\n        // checks for any outdated balances\\n        if (userLastUpdateEpoch + 1 == currentStakeEpoch) {\\n            user.stakingVoucher.amountStaked = user.stakingVoucher.amountQueued;\\n            user.stakingVoucher.amountQueued = 0;\\n            user.stakingVoucher.queueEpoch = currentStakeEpoch;\\n        } else if (userLastUpdateEpoch + 2 <= currentStakeEpoch) {\\n            user.stakingVoucher.amountStaked = 0;\\n            user.stakingVoucher.amountQueued = 0;\\n        }\\n    }\\n\\n    function _stakeUpdates(address user, uint256 _amount) internal {\\n        _updateUserBalances(user);\\n\\n        userBalance[user].stakingVoucher.amountQueued =\\n            userBalance[user].stakingVoucher.amountQueued +\\n            _amount;\\n        userBalance[user].stakingVoucher.queueEpoch = currentStakeEpoch;\\n\\n        currentQueuedTotal = currentQueuedTotal + _amount;\\n\\n        emit Stake(\\n            user,\\n            _amount,\\n            staking.getMaturingTimestamp(address(this)) + timeToStake\\n        );\\n    }\\n\\n    function _getStakedValueInShares(uint256 value)\\n        internal\\n        view\\n        returns (uint256 shares)\\n    {\\n        uint256 rewardsNotStaked =\\n            rewardMaturing + rewardQueued + rewardNotStaked;\\n        // total value related to totalStakedShares\\n        uint256 totalAccumulatedValue = totalStaked + rewardsNotStaked;\\n        if (totalAccumulatedValue == 0) return 0;\\n        return (value * totalStakedShares) / totalAccumulatedValue;\\n    }\\n\\n    function _getStakedSharesInValue(uint256 shares)\\n        internal\\n        view\\n        returns (uint256 value)\\n    {\\n        if (totalStakedShares == 0) return 0;\\n        uint256 rewardsNotStaked =\\n            rewardMaturing + rewardNotStaked + rewardQueued;\\n        // total value related to totalStakedShares\\n        uint256 totalAccumulatedValue = totalStaked + rewardsNotStaked;\\n        return (shares * totalAccumulatedValue) / totalStakedShares;\\n    }\\n\\n    function _getUnstakedSharesInValue(uint256 shares)\\n        internal\\n        view\\n        returns (uint256 value)\\n    {\\n        if (totalUnstakedShares == 0) return 0;\\n        // total value related to totalUnstakedShares\\n        uint256 totalAccumulatedValue = totalUnstaking + totalWithdrawable;\\n        return (shares * totalAccumulatedValue) / totalUnstakedShares;\\n    }\\n\\n    function _getUnstakedValueInShares(uint256 value)\\n        internal\\n        view\\n        returns (uint256 shares)\\n    {\\n        // total value related to totalUnstakedShares\\n        uint256 totalAccumulatedValue = totalUnstaking + totalWithdrawable;\\n        if (totalAccumulatedValue == 0) return 0;\\n        return (value * totalUnstakedShares) / totalAccumulatedValue;\\n    }\\n\\n    function _getUserMaturatedShares(StakingVoucher storage v)\\n        internal\\n        view\\n        returns (uint256 shares)\\n    {\\n        // check whether any balance under 'amountQueued' is already mature\\n        if (v.queueEpoch + 2 <= currentStakeEpoch) {\\n            shares = v.amountQueued * stakingVoucherValueAtEpoch[v.queueEpoch];\\n        }\\n        // check whether any balance under 'amountStaked' is already mature\\n        if (v.queueEpoch > 0 && v.queueEpoch + 1 <= currentStakeEpoch) {\\n            shares +=\\n                v.amountStaked *\\n                stakingVoucherValueAtEpoch[v.queueEpoch - 1];\\n        }\\n    }\\n\\n    function canCycleStakeMaturation()\\n        external\\n        view\\n        override\\n        returns (\\n            bool available,\\n            uint256 _currentQueuedTotal,\\n            uint256 _currentMaturingTotal\\n        )\\n    {\\n        if (staking.getMaturingTimestamp(address(this)) > block.timestamp)\\n            return (false, currentQueuedTotal, currentMaturingTotal);\\n        return (true, currentQueuedTotal, currentMaturingTotal);\\n    }\\n\\n    function canCycleWithdrawRelease()\\n        external\\n        view\\n        override\\n        returns (\\n            bool available,\\n            uint256 _totalToUnstakeValue,\\n            uint256 _totalUnstaking\\n        )\\n    {\\n        _totalToUnstakeValue = _getStakedSharesInValue(totalToUnstakeShares);\\n        if (\\n            staking.getReleasingBalance(address(this)) > 0 &&\\n            staking.getReleasingTimestamp(address(this)) > block.timestamp\\n        ) return (false, _totalToUnstakeValue, totalUnstaking);\\n        return (true, _totalToUnstakeValue, totalUnstaking);\\n    }\\n}\\n\",\"keccak256\":\"0x7b107d63870148e300e3f82deae2388660971641641dafd9216cc88b9a071add\",\"license\":\"Apache-2.0\"},\"contracts/StakingPoolManagement.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma solidity ^0.8.0;\\n\\ninterface StakingPoolManagement {\\n    /// @notice sets a name for the pool using ENS service\\n    function setName(string memory name) external;\\n\\n    /// @notice pauses new staking on the pool\\n    function pause() external;\\n\\n    /// @notice unpauses new staking on the pool\\n    function unpause() external;\\n\\n    /// @notice Event emmited when a pool is rename\\n    event StakingPoolRenamed(string name);\\n\\n    /// @notice allows for the pool to act on its own behalf when producing blocks.\\n    function selfhire() external payable;\\n\\n    /// @notice Asks the worker to work for the sender. Sender needs to pay something.\\n    /// @param workerAddress address of the worker\\n    function hire(address payable workerAddress) external payable;\\n\\n    /// @notice Called by the user to cancel a job offer\\n    /// @param workerAddress address of the worker node\\n    function cancelHire(address workerAddress) external;\\n\\n    /// @notice Called by the user to retire his worker.\\n    /// @param workerAddress address of the worker to be retired\\n    /// @dev this also removes all authorizations in place\\n    function retire(address payable workerAddress) external;\\n}\\n\",\"keccak256\":\"0xec0e9343c5cfbe93b7443e6786d8d1e7a6cfe8f57526afcb0e02ff426e8de02b\",\"license\":\"Apache-2.0\"},\"contracts/StakingPoolManagementImpl.sol\":{\"content\":\"// Copyright 2021 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n/// @title Interface staking contract\\npragma solidity ^0.8.0;\\n\\nimport \\\"@cartesi/pos/contracts/IPoS.sol\\\";\\nimport \\\"@cartesi/pos/contracts/IWorkerManagerAuthManager.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ReverseRegistrar.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./StakingPoolManagement.sol\\\";\\n\\ncontract StakingPoolManagementImpl is\\n    StakingPoolManagement,\\n    Initializable,\\n    Pausable\\n{\\n    bytes32 private constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    ENS public immutable ens;\\n    IPoS public immutable pos;\\n\\n    IWorkerManagerAuthManager public immutable workerManager;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    address private _owner;\\n\\n    // all immutable variables can stay at the constructor\\n    constructor(\\n        address _ens,\\n        address _workerManager,\\n        address _pos\\n    ) {\\n        require(_ens != address(0), \\\"parameter can not be zero address\\\");\\n        require(\\n            _workerManager != address(0),\\n            \\\"parameter can not be zero address\\\"\\n        );\\n        require(_pos != address(0), \\\"parameter can not be zero address\\\");\\n\\n        ens = ENS(_ens);\\n        workerManager = IWorkerManagerAuthManager(_workerManager);\\n        pos = IPoS(_pos);\\n        // make sure reference code is pause so noone stake to it\\n        initialize(address(0));\\n        _pause();\\n    }\\n\\n    function initialize(address ownerSender) internal initializer {\\n        _owner = ownerSender;\\n        emit OwnershipTransferred(address(0), ownerSender);\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice sets a name for the pool using ENS service\\n    function setName(string memory name) external override onlyOwner {\\n        ReverseRegistrar ensReverseRegistrar =\\n            ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\\n\\n        // call the ENS reverse registrar resolving pool address to name\\n        ensReverseRegistrar.setName(name);\\n\\n        // emit event, for subgraph processing\\n        emit StakingPoolRenamed(name);\\n    }\\n\\n    /// @notice pauses new staking on the pool\\n    function pause() public override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice unpauses new staking on the pool\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice allows for the pool to act on its own behalf when producing blocks.\\n    function selfhire() external payable override {\\n        // pool needs to be both user and worker\\n        workerManager.hire{value: msg.value}(payable(address(this)));\\n        workerManager.authorize(address(this), address(pos));\\n        workerManager.acceptJob();\\n        payable(_owner).transfer(msg.value);\\n    }\\n\\n    /// @notice Asks the worker to work for the sender. Sender needs to pay something.\\n    /// @param workerAddress address of the worker\\n    function hire(address payable workerAddress) external payable override {\\n        workerManager.hire{value: msg.value}(workerAddress);\\n        workerManager.authorize(workerAddress, address(pos));\\n    }\\n\\n    /// @notice Called by the user to cancel a job offer\\n    /// @param workerAddress address of the worker node\\n    function cancelHire(address workerAddress) external override {\\n        workerManager.cancelHire(workerAddress);\\n    }\\n\\n    /// @notice Called by the user to retire his worker.\\n    /// @param workerAddress address of the worker to be retired\\n    /// @dev this also removes all authorizations in place\\n    function retire(address payable workerAddress) external override {\\n        workerManager.retire(workerAddress);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x9fbb4c85625a591d46db2d1174d41ca86c3e23a30486d615834f082e67e76ac4\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051611b57380380611b5783398101604081905261002f916101b2565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690556001600160a01b0383166100d15760405162461bcd60e51b81526020600482015260226024820152600080516020611b37833981519152604482015261399760f11b60648201526084015b60405180910390fd5b6001600160a01b0382166101205760405162461bcd60e51b81526020600482015260226024820152600080516020611b37833981519152604482015261399760f11b60648201526084016100c8565b6001600160a01b03811661016f5760405162461bcd60e51b81526020600482015260226024820152600080516020611b37833981519152604482015261399760f11b60648201526084016100c8565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c0526101f5565b80516001600160a01b03811681146101ad57600080fd5b919050565b6000806000606084860312156101c757600080fd5b6101d084610196565b92506101de60208501610196565b91506101ec60408501610196565b90509250925092565b60805160601c60a05160601c60c05160601c6118ef6102486000396000818160b301526105bb0152600081816101b3015261059a015260008181610207015281816103e8015261062b01526118ef6000f3fe60806040526004361061009c5760003560e01c806386f1a7171161006457806386f1a7171461015d5780638da5cb5b14610170578063964658b61461018e578063ef06e72c146101a1578063f2fde38b146101d5578063fcda974d146101f557600080fd5b8063120c6c5b146100a15780633f4ba83a146100f25780635c975abb14610109578063715018a6146101335780638456cb5914610148575b600080fd5b3480156100ad57600080fd5b506100d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100fe57600080fd5b50610107610229565b005b34801561011557600080fd5b50600054600160a01b900460ff1660405190151581526020016100e9565b34801561013f57600080fd5b506101076102b2565b34801561015457600080fd5b50610107610326565b6100d561016b366004610a6e565b610382565b34801561017c57600080fd5b506000546001600160a01b03166100d5565b6100d561019c366004610a6e565b61056b565b3480156101ad57600080fd5b506100d57f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e157600080fd5b506101076101f0366004610a3e565b6107a0565b34801561020157600080fd5b506100d57f000000000000000000000000000000000000000000000000000000000000000081565b600054600160a01b900460ff1661027e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064015b60405180910390fd5b6000546001600160a01b031633146102a85760405162461bcd60e51b815260040161027590610ab1565b6102b061088a565b565b6000546001600160a01b031633146102dc5760405162461bcd60e51b815260040161027590610ab1565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600054600160a01b900460ff16156103505760405162461bcd60e51b815260040161027590610a87565b6000546001600160a01b0316331461037a5760405162461bcd60e51b815260040161027590610ab1565b6102b0610927565b60008054600160a01b900460ff16156103ad5760405162461bcd60e51b815260040161027590610a87565b6000826040516103bc90610a24565b908152602001604051809103906000f0801580156103de573d6000803e3d6000fd5b509050600061040c7f000000000000000000000000000000000000000000000000000000000000000061098c565b60405163485cc95560e01b81526001600160a01b038481166004830152336024830152919250829182169063485cc95590604401600060405180830381600087803b15801561045a57600080fd5b505af115801561046e573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038616925063f2fde38b9150602401600060405180830381600087803b1580156104b357600080fd5b505af11580156104c7573d6000803e3d6000fd5b50505050806001600160a01b0316636ff46a6c346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561050657600080fd5b505af115801561051a573d6000803e3d6000fd5b50506040516001600160a01b038781168252851693507fdca0276ad17c3c65434ae45a0754677f87ae465de69763ebe79ceaeff2805bc7925060200190505b60405180910390a2925050505b919050565b60008054600160a01b900460ff16156105965760405162461bcd60e51b815260040161027590610a87565b60007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846040516105e790610a31565b6001600160a01b0393841681529290911660208301526040820152606001604051809103906000f080158015610621573d6000803e3d6000fd5b509050600061064f7f000000000000000000000000000000000000000000000000000000000000000061098c565b60405163485cc95560e01b81526001600160a01b038481166004830152336024830152919250829182169063485cc95590604401600060405180830381600087803b15801561069d57600080fd5b505af11580156106b1573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038616925063f2fde38b9150602401600060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b50505050806001600160a01b0316636ff46a6c346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b50506040516001600160a01b038781168252851693507f93b9326c0865b177ab4a6131c8e6806a0edc9f3585dbaeb773542d3582d0457192506020019050610559565b6000546001600160a01b031633146107ca5760405162461bcd60e51b815260040161027590610ab1565b6001600160a01b03811661082f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610275565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff166108da5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610275565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff16156109515760405162461bcd60e51b815260040161027590610a87565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861090a3390565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166105665760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610275565b61056680610ae783390190565b61086d8061104d83390190565b600060208284031215610a5057600080fd5b81356001600160a01b0381168114610a6757600080fd5b9392505050565b600060208284031215610a8057600080fd5b5035919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe608060405261271060015534801561001657600080fd5b50604051610566380380610566833981016040819052610035916100b4565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060028190556040518181527f7c077544e22d8a88c7724ade64ffb2e31f1dce5369f26a3754b8e04aa87bdb669060200160405180910390a1506100cd565b6000602082840312156100c657600080fd5b5051919050565b61048a806100dc6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100bb578063b1fc8ad4146100d6578063ec342ad0146100e9578063f2fde38b146100f257600080fd5b80632c4e722e1461008257806334fcf4371461009e578063715018a6146100b3575b600080fd5b61008b60025481565b6040519081526020015b60405180910390f35b6100b16100ac366004610395565b610105565b005b6100b16101ea565b6000546040516001600160a01b039091168152602001610095565b61008b6100e43660046103ae565b61025e565b61008b60015481565b6100b161010036600461036c565b610282565b6000546001600160a01b031633146101385760405162461bcd60e51b815260040161012f906103d0565b60405180910390fd5b60025481106101af5760405162461bcd60e51b815260206004820152603760248201527f6e657752617465206e6565647320746f206265207374726963746c7920736d6160448201527f6c6c6572207468616e2063757272656e7420726174652e000000000000000000606482015260840161012f565b60028190556040518181527f7c077544e22d8a88c7724ade64ffb2e31f1dce5369f26a3754b8e04aa87bdb669060200160405180910390a150565b6000546001600160a01b031633146102145760405162461bcd60e51b815260040161012f906103d0565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000600154600254836102719190610427565b61027b9190610405565b9392505050565b6000546001600160a01b031633146102ac5760405162461bcd60e51b815260040161012f906103d0565b6001600160a01b0381166103115760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161012f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561037e57600080fd5b81356001600160a01b038116811461027b57600080fd5b6000602082840312156103a757600080fd5b5035919050565b600080604083850312156103c157600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008261042257634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561044f57634e487b7160e01b600052601160045260246000fd5b50029056fea26469706673582212200734019a238d7859f017d97a1389722d2d196b0dddfd21bee1130d1e0baef2a864736f6c6343000806003360c060405234801561001057600080fd5b5060405161086d38038061086d83398101604081905261002f916100ed565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606084811b821660805283901b1660a05260018190556040517fd8120d6ff65f04a7663a7fa333122bcf1630c76e6198691647b8b952fd6427f7906100c19083815260200190565b60405180910390a1505050610129565b80516001600160a01b03811681146100e857600080fd5b919050565b60008060006060848603121561010257600080fd5b61010b846100d1565b9250610119602085016100d1565b9150604084015190509250925092565b60805160601c60a05160601c61070d610160600039600081816092015261028f01526000818160d601526101e5015261070d6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610119578063b1fc8ad41461012a578063dd51faa21461013d578063f2fde38b1461015057600080fd5b80632630c12f1461008d5780635d62a8dd146100d15780636ca7c216146100f8578063715018a61461010f575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b61010160015481565b6040519081526020016100c8565b610117610163565b005b6000546001600160a01b03166100b4565b610101610138366004610631565b6101e0565b61011761014b366004610618565b61038f565b61011761015e36600461057f565b610479565b6000546001600160a01b031633146101965760405162461bcd60e51b815260040161018d90610653565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561023c57600080fd5b505afa158015610250573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027491906105af565b905060006001548261028691906106aa565b905060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156102e657600080fd5b505afa1580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e91906105c8565b925092509250816001600160701b03166000141561034457600095505050505050610389565b6000826001600160701b0316846001600160701b03168661036591906106aa565b61036f9190610688565b905087811161037e5780610380565b875b96505050505050505b92915050565b6000546001600160a01b031633146103b95760405162461bcd60e51b815260040161018d90610653565b600154811061043e5760405162461bcd60e51b815260206004820152604560248201527f6e6577476173436f6d6d697373696f6e206e6565647320746f2062652073747260448201527f6963746c7920736d616c6c6572207468616e207468652063757272656e74207660648201526430b63ab29760d91b608482015260a40161018d565b60018190556040518181527fd8120d6ff65f04a7663a7fa333122bcf1630c76e6198691647b8b952fd6427f79060200160405180910390a150565b6000546001600160a01b031633146104a35760405162461bcd60e51b815260040161018d90610653565b6001600160a01b0381166105085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161018d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80516001600160701b038116811461057a57600080fd5b919050565b60006020828403121561059157600080fd5b81356001600160a01b03811681146105a857600080fd5b9392505050565b6000602082840312156105c157600080fd5b5051919050565b6000806000606084860312156105dd57600080fd5b6105e684610563565b92506105f460208501610563565b9150604084015163ffffffff8116811461060d57600080fd5b809150509250925092565b60006020828403121561062a57600080fd5b5035919050565b6000806040838503121561064457600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000826106a557634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156106d257634e487b7160e01b600052601160045260246000fd5b50029056fea26469706673582212201c11844a8adabefc7e05d4e4589318807c9e0f2df58705ef271f488a712707e464736f6c63430008060033a2646970667358221220d76ad7bbabb8e6b1e744843008d8deb7c3f3c1b66ba14217a85f6979d647dcfa64736f6c63430008060033706172616d657465722063616e206e6f74206265207a65726f20616464726573",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c806386f1a7171161006457806386f1a7171461015d5780638da5cb5b14610170578063964658b61461018e578063ef06e72c146101a1578063f2fde38b146101d5578063fcda974d146101f557600080fd5b8063120c6c5b146100a15780633f4ba83a146100f25780635c975abb14610109578063715018a6146101335780638456cb5914610148575b600080fd5b3480156100ad57600080fd5b506100d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100fe57600080fd5b50610107610229565b005b34801561011557600080fd5b50600054600160a01b900460ff1660405190151581526020016100e9565b34801561013f57600080fd5b506101076102b2565b34801561015457600080fd5b50610107610326565b6100d561016b366004610a6e565b610382565b34801561017c57600080fd5b506000546001600160a01b03166100d5565b6100d561019c366004610a6e565b61056b565b3480156101ad57600080fd5b506100d57f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e157600080fd5b506101076101f0366004610a3e565b6107a0565b34801561020157600080fd5b506100d57f000000000000000000000000000000000000000000000000000000000000000081565b600054600160a01b900460ff1661027e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064015b60405180910390fd5b6000546001600160a01b031633146102a85760405162461bcd60e51b815260040161027590610ab1565b6102b061088a565b565b6000546001600160a01b031633146102dc5760405162461bcd60e51b815260040161027590610ab1565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600054600160a01b900460ff16156103505760405162461bcd60e51b815260040161027590610a87565b6000546001600160a01b0316331461037a5760405162461bcd60e51b815260040161027590610ab1565b6102b0610927565b60008054600160a01b900460ff16156103ad5760405162461bcd60e51b815260040161027590610a87565b6000826040516103bc90610a24565b908152602001604051809103906000f0801580156103de573d6000803e3d6000fd5b509050600061040c7f000000000000000000000000000000000000000000000000000000000000000061098c565b60405163485cc95560e01b81526001600160a01b038481166004830152336024830152919250829182169063485cc95590604401600060405180830381600087803b15801561045a57600080fd5b505af115801561046e573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038616925063f2fde38b9150602401600060405180830381600087803b1580156104b357600080fd5b505af11580156104c7573d6000803e3d6000fd5b50505050806001600160a01b0316636ff46a6c346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561050657600080fd5b505af115801561051a573d6000803e3d6000fd5b50506040516001600160a01b038781168252851693507fdca0276ad17c3c65434ae45a0754677f87ae465de69763ebe79ceaeff2805bc7925060200190505b60405180910390a2925050505b919050565b60008054600160a01b900460ff16156105965760405162461bcd60e51b815260040161027590610a87565b60007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846040516105e790610a31565b6001600160a01b0393841681529290911660208301526040820152606001604051809103906000f080158015610621573d6000803e3d6000fd5b509050600061064f7f000000000000000000000000000000000000000000000000000000000000000061098c565b60405163485cc95560e01b81526001600160a01b038481166004830152336024830152919250829182169063485cc95590604401600060405180830381600087803b15801561069d57600080fd5b505af11580156106b1573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038616925063f2fde38b9150602401600060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b50505050806001600160a01b0316636ff46a6c346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561074957600080fd5b505af115801561075d573d6000803e3d6000fd5b50506040516001600160a01b038781168252851693507f93b9326c0865b177ab4a6131c8e6806a0edc9f3585dbaeb773542d3582d0457192506020019050610559565b6000546001600160a01b031633146107ca5760405162461bcd60e51b815260040161027590610ab1565b6001600160a01b03811661082f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610275565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff166108da5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610275565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff16156109515760405162461bcd60e51b815260040161027590610a87565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861090a3390565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166105665760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610275565b61056680610ae783390190565b61086d8061104d83390190565b600060208284031215610a5057600080fd5b81356001600160a01b0381168114610a6757600080fd5b9392505050565b600060208284031215610a8057600080fd5b5035919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe608060405261271060015534801561001657600080fd5b50604051610566380380610566833981016040819052610035916100b4565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060028190556040518181527f7c077544e22d8a88c7724ade64ffb2e31f1dce5369f26a3754b8e04aa87bdb669060200160405180910390a1506100cd565b6000602082840312156100c657600080fd5b5051919050565b61048a806100dc6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100bb578063b1fc8ad4146100d6578063ec342ad0146100e9578063f2fde38b146100f257600080fd5b80632c4e722e1461008257806334fcf4371461009e578063715018a6146100b3575b600080fd5b61008b60025481565b6040519081526020015b60405180910390f35b6100b16100ac366004610395565b610105565b005b6100b16101ea565b6000546040516001600160a01b039091168152602001610095565b61008b6100e43660046103ae565b61025e565b61008b60015481565b6100b161010036600461036c565b610282565b6000546001600160a01b031633146101385760405162461bcd60e51b815260040161012f906103d0565b60405180910390fd5b60025481106101af5760405162461bcd60e51b815260206004820152603760248201527f6e657752617465206e6565647320746f206265207374726963746c7920736d6160448201527f6c6c6572207468616e2063757272656e7420726174652e000000000000000000606482015260840161012f565b60028190556040518181527f7c077544e22d8a88c7724ade64ffb2e31f1dce5369f26a3754b8e04aa87bdb669060200160405180910390a150565b6000546001600160a01b031633146102145760405162461bcd60e51b815260040161012f906103d0565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000600154600254836102719190610427565b61027b9190610405565b9392505050565b6000546001600160a01b031633146102ac5760405162461bcd60e51b815260040161012f906103d0565b6001600160a01b0381166103115760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161012f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561037e57600080fd5b81356001600160a01b038116811461027b57600080fd5b6000602082840312156103a757600080fd5b5035919050565b600080604083850312156103c157600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008261042257634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561044f57634e487b7160e01b600052601160045260246000fd5b50029056fea26469706673582212200734019a238d7859f017d97a1389722d2d196b0dddfd21bee1130d1e0baef2a864736f6c6343000806003360c060405234801561001057600080fd5b5060405161086d38038061086d83398101604081905261002f916100ed565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606084811b821660805283901b1660a05260018190556040517fd8120d6ff65f04a7663a7fa333122bcf1630c76e6198691647b8b952fd6427f7906100c19083815260200190565b60405180910390a1505050610129565b80516001600160a01b03811681146100e857600080fd5b919050565b60008060006060848603121561010257600080fd5b61010b846100d1565b9250610119602085016100d1565b9150604084015190509250925092565b60805160601c60a05160601c61070d610160600039600081816092015261028f01526000818160d601526101e5015261070d6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610119578063b1fc8ad41461012a578063dd51faa21461013d578063f2fde38b1461015057600080fd5b80632630c12f1461008d5780635d62a8dd146100d15780636ca7c216146100f8578063715018a61461010f575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b61010160015481565b6040519081526020016100c8565b610117610163565b005b6000546001600160a01b03166100b4565b610101610138366004610631565b6101e0565b61011761014b366004610618565b61038f565b61011761015e36600461057f565b610479565b6000546001600160a01b031633146101965760405162461bcd60e51b815260040161018d90610653565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561023c57600080fd5b505afa158015610250573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027491906105af565b905060006001548261028691906106aa565b905060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156102e657600080fd5b505afa1580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e91906105c8565b925092509250816001600160701b03166000141561034457600095505050505050610389565b6000826001600160701b0316846001600160701b03168661036591906106aa565b61036f9190610688565b905087811161037e5780610380565b875b96505050505050505b92915050565b6000546001600160a01b031633146103b95760405162461bcd60e51b815260040161018d90610653565b600154811061043e5760405162461bcd60e51b815260206004820152604560248201527f6e6577476173436f6d6d697373696f6e206e6565647320746f2062652073747260448201527f6963746c7920736d616c6c6572207468616e207468652063757272656e74207660648201526430b63ab29760d91b608482015260a40161018d565b60018190556040518181527fd8120d6ff65f04a7663a7fa333122bcf1630c76e6198691647b8b952fd6427f79060200160405180910390a150565b6000546001600160a01b031633146104a35760405162461bcd60e51b815260040161018d90610653565b6001600160a01b0381166105085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161018d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80516001600160701b038116811461057a57600080fd5b919050565b60006020828403121561059157600080fd5b81356001600160a01b03811681146105a857600080fd5b9392505050565b6000602082840312156105c157600080fd5b5051919050565b6000806000606084860312156105dd57600080fd5b6105e684610563565b92506105f460208501610563565b9150604084015163ffffffff8116811461060d57600080fd5b809150509250925092565b60006020828403121561062a57600080fd5b5035919050565b6000806040838503121561064457600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000826106a557634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156106d257634e487b7160e01b600052601160045260246000fd5b50029056fea26469706673582212201c11844a8adabefc7e05d4e4589318807c9e0f2df58705ef271f488a712707e464736f6c63430008060033a2646970667358221220d76ad7bbabb8e6b1e744843008d8deb7c3f3c1b66ba14217a85f6979d647dcfa64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createFlatRateCommission(uint256)": {
        "returns": {
          "_0": "new pool address"
        }
      },
      "createGasTaxCommission(uint256)": {
        "returns": {
          "_0": "new pool address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewFlatRateCommissionStakingPool(address,address)": {
        "notice": "Event emmited when a pool is created"
      },
      "NewGasTaxCommissionStakingPool(address,address)": {
        "notice": "Event emmited when a pool is created"
      }
    },
    "kind": "user",
    "methods": {
      "createFlatRateCommission(uint256)": {
        "notice": "Creates a new staking pool emits NewStakingPool with the parameters of the new pool"
      },
      "createGasTaxCommission(uint256)": {
        "notice": "Creates a new staking pool using a gas tax commission model emits NewGasTaxCommissionStakingPool with the parameters of the new pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 647,
        "contract": "contracts/StakingPoolFactoryImpl.sol:StakingPoolFactoryImpl",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 893,
        "contract": "contracts/StakingPoolFactoryImpl.sol:StakingPoolFactoryImpl",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}